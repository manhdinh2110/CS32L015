
========================================================================

** ELF Header Information

    File Name: Project\Project.axf

    Machine class: ELFCLASS32 (32-bit)
    Data encoding: ELFDATA2LSB (Little endian)
    Header version: EV_CURRENT (Current version)
    Operating System ABI: none
    ABI Version: 0
    File Type: ET_EXEC (Executable) (2)
    Machine: EM_ARM (ARM)

    Image Entry point: 0x000000c1
    Flags: EF_ARM_HASENTRY + EF_ARM_ABI_FLOAT_SOFT (0x05000202)

    ARM ELF revision: 5 (ABI version 2)

    Conforms to Soft float procedure-call standard

    Built with
    Component: Arm Compiler for Embedded 6.22 Tool: armasm [5d895400]
    Component: Arm Compiler for Embedded 6.22 Tool: armlink [5d895400]

    Header size: 52 bytes (0x34)
    Program header entry size: 32 bytes (0x20)
    Section header entry size: 40 bytes (0x28)

    Program header entries: 1
    Section header entries: 16

    Program header offset: 72928 (0x00011ce0)
    Section header offset: 72960 (0x00011d00)

    Section header string table index: 15

========================================================================

** Program header #0 (PT_LOAD) [PF_X + PF_W + PF_R + PF_ARM_ENTRY]
    Size : 5000 bytes (4120 bytes in file)
    Virtual address: 0x00000000 (Alignment 8)


========================================================================

** Section #1 'ER_IROM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_EXECINSTR]
    Size   : 4092 bytes (alignment 4)
    Address: 0x00000000

    $d.realdata
    RESET
    __Vectors
        0x00000000:    20000388    ...     DCD    536871816
        0x00000004:    000000d5    ....    DCD    213
        0x00000008:    00000b91    ....    DCD    2961
        0x0000000c:    00000b8d    ....    DCD    2957
        0x00000010:    00000000    ....    DCD    0
        0x00000014:    00000000    ....    DCD    0
        0x00000018:    00000000    ....    DCD    0
        0x0000001c:    00000000    ....    DCD    0
        0x00000020:    00000000    ....    DCD    0
        0x00000024:    00000000    ....    DCD    0
        0x00000028:    00000000    ....    DCD    0
        0x0000002c:    00000bbd    ....    DCD    3005
        0x00000030:    00000000    ....    DCD    0
        0x00000034:    00000000    ....    DCD    0
        0x00000038:    00000b93    ....    DCD    2963
        0x0000003c:    00000bed    ....    DCD    3053
        0x00000040:    000000e7    ....    DCD    231
        0x00000044:    000000e7    ....    DCD    231
        0x00000048:    000000e7    ....    DCD    231
        0x0000004c:    000000e7    ....    DCD    231
        0x00000050:    000000e7    ....    DCD    231
        0x00000054:    00000000    ....    DCD    0
        0x00000058:    000000e7    ....    DCD    231
        0x0000005c:    000000e7    ....    DCD    231
        0x00000060:    000000e7    ....    DCD    231
        0x00000064:    00000c41    A...    DCD    3137
        0x00000068:    000000e7    ....    DCD    231
        0x0000006c:    000000e7    ....    DCD    231
        0x00000070:    000000e7    ....    DCD    231
        0x00000074:    000000e7    ....    DCD    231
        0x00000078:    000000e7    ....    DCD    231
        0x0000007c:    000000e7    ....    DCD    231
        0x00000080:    000000e7    ....    DCD    231
        0x00000084:    000000e7    ....    DCD    231
        0x00000088:    000000e7    ....    DCD    231
        0x0000008c:    000000e7    ....    DCD    231
        0x00000090:    000000e7    ....    DCD    231
        0x00000094:    000000e7    ....    DCD    231
        0x00000098:    000000e7    ....    DCD    231
        0x0000009c:    000000e7    ....    DCD    231
        0x000000a0:    000000e7    ....    DCD    231
        0x000000a4:    000000e7    ....    DCD    231
        0x000000a8:    000000e7    ....    DCD    231
        0x000000ac:    000000e7    ....    DCD    231
        0x000000b0:    000000e7    ....    DCD    231
        0x000000b4:    000000e7    ....    DCD    231
        0x000000b8:    000000e7    ....    DCD    231
        0x000000bc:    000000e7    ....    DCD    231
    $t
    .ARM.Collect$$$$00000000
    .ARM.Collect$$$$00000001
    __Vectors_End
    __main
    _main_stk
        0x000000c0:    4803        .H      LDR      r0,__lit__00000000 ; [0xd0] = 0x20000388
        0x000000c2:    4685        .F      MOV      sp,r0
    .ARM.Collect$$$$00000004
    _main_scatterload
        0x000000c4:    f000f846    ..F.    BL       __scatterload ; 0x154
    .ARM.Collect$$$$00000008
    .ARM.Collect$$$$0000000A
    .ARM.Collect$$$$0000000B
    __main_after_scatterload
    _main_clock
    _main_cpp_init
    _main_init
        0x000000c8:    4800        .H      LDR      r0,[pc,#0] ; [0xcc] = 0xde5
        0x000000ca:    4700        .G      BX       r0
    $d
        0x000000cc:    00000de5    ....    DCD    3557
    .ARM.Collect$$$$00002712
    __lit__00000000
    .ARM.Collect$$$$0000000D
    .ARM.Collect$$$$0000000F
    __rt_final_cpp
    __rt_final_exit
        0x000000d0:    20000388    ...     DCD    536871816
    $t
    .text
    Reset_Handler
;;;126                    LDR     R0, =SystemInit
        0x000000d4:    4804        .H      LDR      r0,[pc,#16] ; [0xe8] = 0xbf5
;;;127                    BLX     R0
        0x000000d6:    4780        .G      BLX      r0
;;;128                    LDR     R0, =__main
        0x000000d8:    4804        .H      LDR      r0,[pc,#16] ; [0xec] = 0xc1
;;;129                    BX      R0
        0x000000da:    4700        .G      BX       r0
;;;130                    ENDP
;;;131    
;;;132    
;;;133    ; Dummy Exception Handlers (infinite loops which can be modified)
;;;134    
;;;135    NMI_Handler     PROC
;;;136                    EXPORT  NMI_Handler               [WEAK]
;;;137                    B       .
        0x000000dc:    e7fe        ..      B        0xdc ; Reset_Handler + 8
;;;138                    ENDP
;;;139    HardFault_Handler\
;;;140                    PROC
;;;141                    EXPORT  HardFault_Handler         [WEAK]
;;;142                    B       .
        0x000000de:    e7fe        ..      B        0xde ; Reset_Handler + 10
;;;143                    ENDP
;;;144    SVC_Handler     PROC
;;;145                    EXPORT  SVC_Handler               [WEAK]
;;;146                    B       .
        0x000000e0:    e7fe        ..      B        0xe0 ; Reset_Handler + 12
;;;147                    ENDP
;;;148    PendSV_Handler  PROC
;;;149                    EXPORT  PendSV_Handler            [WEAK]
;;;150                    B       .
        0x000000e2:    e7fe        ..      B        0xe2 ; Reset_Handler + 14
;;;151                    ENDP
;;;152    SysTick_Handler PROC
;;;153                    EXPORT  SysTick_Handler           [WEAK]
;;;154                    B       .
        0x000000e4:    e7fe        ..      B        0xe4 ; Reset_Handler + 16
    ADC_IRQHandler
    AWT_IRQHandler
    CLKTRIM_IRQHandler
    FLASH_IRQHandler
    FWDT_IRQHandler
    GPIOA_IRQHandler
    GPIOB_IRQHandler
    GPIOC_IRQHandler
    GPIOD_IRQHandler
    I2C0_1_IRQHandler
    LPTIM_IRQHandler
    LPUART_IRQHandler
    LVD_IRQHandler
    OWI_IRQHandler
    PCA_IRQHandler
    RTC_IRQHandler
    SPI0_1_IRQHandler
    TIM10_IRQHandler
    TIM11_IRQHandler
    TIM1_IRQHandler
    TIM2_IRQHandler
    TIM3_IRQHandler
    TIM4_IRQHandler
    TIM5_IRQHandler
    TIM7_IRQHandler
    TIM8_IRQHandler
    UART0_IRQHandler
    UART1_IRQHandler
    VC0_1_IRQHandler
    WWDT_IRQHandler
;;;155                    ENDP
;;;156    
;;;157    Default_Handler PROC
;;;158    
;;;159                    EXPORT  GPIOA_IRQHandler          [WEAK]  ; GPIOA_IRQn          = 0,
;;;160                    EXPORT  GPIOB_IRQHandler          [WEAK]  ; GPIOB_IRQn          = 1,
;;;161                    EXPORT  GPIOC_IRQHandler          [WEAK]  ; GPIOC_IRQn          = 2,
;;;162                    EXPORT  GPIOD_IRQHandler          [WEAK]  ; GPIOD_IRQn          = 3,
;;;163                    EXPORT  FLASH_IRQHandler          [WEAK]  ; FLASH_IRQHandler    = 4,
;;;164                    ;EXPORT  0                        [WEAK]  ; Reserved--------------5,
;;;165                    EXPORT  UART0_IRQHandler          [WEAK]  ; UART0_IRQn          = 6,
;;;166                    EXPORT  UART1_IRQHandler          [WEAK]  ; UART1_IRQn          = 7,
;;;167                    EXPORT  LPUART_IRQHandler         [WEAK]  ; LPUART_IRQn         = 8,
;;;168                    EXPORT  UART2_3_IRQHandler        [WEAK]  ; UART2_3_IRQn        = 9,
;;;169                    EXPORT  SPI0_1_IRQHandler         [WEAK]  ; SPI0_1_IRQn         = 10,
;;;170                    EXPORT  TIM5_IRQHandler           [WEAK]  ; TIM5_IRQn          = 11,
;;;171                    EXPORT  I2C0_1_IRQHandler         [WEAK]  ; I2C0_1_IRQn         = 12,
;;;172                    EXPORT  TIM8_IRQHandler          [WEAK]  ; TIM8_IRQn          = 13,
;;;173                    EXPORT  TIM10_IRQHandler          [WEAK]  ; TIM10_IRQn          = 14,
;;;174                    EXPORT  TIM11_IRQHandler          [WEAK]  ; TIM11_IRQn          = 15,
;;;175                    EXPORT  LPTIM_IRQHandler          [WEAK]  ; LPTIMER_IRQn        = 16,
;;;176                    EXPORT  TIM7_IRQHandler          [WEAK]  ; TIM7_IRQn          = 17,
;;;177                    EXPORT  TIM1_IRQHandler           [WEAK]  ; ADVTIM1             = 18,
;;;178                    EXPORT  TIM2_IRQHandler           [WEAK]  ; ADVTIM2             = 19,
;;;179                    EXPORT  TIM3_IRQHandler          [WEAK]  ; TIM3_IRQn          = 20,
;;;180                    EXPORT  PCA_IRQHandler            [WEAK]  ; PCA_IRQn            = 21,
;;;181                    EXPORT  WWDT_IRQHandler           [WEAK]  ; WWDT_IRQn           = 22,
;;;182                    EXPORT  FWDT_IRQHandler           [WEAK]  ; IWDT_IRQn           = 23,
;;;183                    EXPORT  ADC_IRQHandler            [WEAK]  ; ADC0_IRQn           = 24,
;;;184                    EXPORT  LVD_IRQHandler            [WEAK]  ; LVD_IRQn            = 25,
;;;185                    EXPORT  VC0_1_IRQHandler          [WEAK]  ; VC0_1_IRQn          = 26,
;;;186                    EXPORT  TIM4_IRQHandler          [WEAK]  ; TIM4_IRQn          = 27,
;;;187                    EXPORT  AWT_IRQHandler            [WEAK]  ; AWT_IRQn            = 28,
;;;188                    EXPORT  OWI_IRQHandler          [WEAK]  ; OWI_IRQn          = 29,
;;;189                    EXPORT  RTC_IRQHandler            [WEAK]  ; RTC_MATCH0_IRQn     = 30,
;;;190                    EXPORT  CLKTRIM_IRQHandler        [WEAK]  ; CLKTRIM_IRQn        = 31
;;;191    
;;;192    
;;;193    GPIOA_IRQHandler          ; GPIOA_IRQn          = 0,
;;;194    GPIOB_IRQHandler          ; GPIOB_IRQn          = 1,
;;;195    GPIOC_IRQHandler          ; GPIOC_IRQn          = 2,
;;;196    GPIOD_IRQHandler          ; GPIOD_IRQn          = 3,
;;;197    FLASH_IRQHandler          ; FLASH_IRQHandler    = 4,
;;;198    ;0                         ; Reserved---------------5,
;;;199    UART0_IRQHandler          ; UART0_IRQn          = 6,
;;;200    UART1_IRQHandler          ; UART1_IRQn          = 7,
;;;201    LPUART_IRQHandler         ; LPUART_IRQn         = 8,
;;;202    UART2_3_IRQHandler        ; UART2_3_IRQn        = 9,
;;;203    SPI0_1_IRQHandler         ; SPI0_1_IRQn         = 10,
;;;204    TIM5_IRQHandler           ; TIM5_IRQn          = 11,
;;;205    I2C0_1_IRQHandler         ; I2C0_1_IRQn         = 12,
;;;206    TIM8_IRQHandler          ; TIM8_IRQn          = 13,
;;;207    TIM10_IRQHandler          ; TIMER0_IRQn         = 14,
;;;208    TIM11_IRQHandler          ; TIMER1_IRQn         = 15,
;;;209    LPTIM_IRQHandler          ; LPTIMER_IRQn        = 16,
;;;210    TIM7_IRQHandler          ; TIM7_IRQn          = 17,
;;;211    TIM1_IRQHandler           ; ADVTim1_IRQn        = 18,
;;;212    TIM2_IRQHandler           ; ADVTim2_IRQn        = 19,
;;;213    TIM3_IRQHandler          ; TIM3_IRQn          = 20,
;;;214    PCA_IRQHandler            ; PCA_IRQn            = 21,
;;;215    WWDT_IRQHandler           ; WWDT_IRQn           = 22,
;;;216    FWDT_IRQHandler           ; IWDT_IRQn           = 23,
;;;217    ADC_IRQHandler            ; ADC_IRQHandler      = 24,
;;;218    LVD_IRQHandler            ; LVD_IRQn            = 25,
;;;219    VC0_1_IRQHandler          ; VC0_1_IRQn          = 26,
;;;220    TIM4_IRQHandler          ; TIM4_IRQn          = 27,
;;;221    AWT_IRQHandler            ; AWT_IRQn            = 28,
;;;222    OWI_IRQHandler          ; OWI_IRQn          = 29,
;;;223    RTC_IRQHandler            ; RTC_IRQHandler      = 30,
;;;224    CLKTRIM_IRQHandler        ; CLKTRIM_IRQn        = 31
;;;225    
;;;226                    B       .
        0x000000e6:    e7fe        ..      B        ADC_IRQHandler ; 0xe6
    $d
        0x000000e8:    00000bf5    ....    DCD    3061
        0x000000ec:    000000c1    ....    DCD    193
    $t
    .text
    __aeabi_memset
    __aeabi_memset4
    __aeabi_memset8
        0x000000f0:    b2d2        ..      UXTB     r2,r2
        0x000000f2:    e001        ..      B        0xf8 ; __aeabi_memset + 8
        0x000000f4:    7002        .p      STRB     r2,[r0,#0]
        0x000000f6:    1c40        @.      ADDS     r0,r0,#1
        0x000000f8:    1e49        I.      SUBS     r1,r1,#1
        0x000000fa:    d2fb        ..      BCS      0xf4 ; __aeabi_memset + 4
        0x000000fc:    4770        pG      BX       lr
    __aeabi_memclr
    __aeabi_memclr4
    __aeabi_memclr8
        0x000000fe:    2200        ."      MOVS     r2,#0
        0x00000100:    e7f6        ..      B        __aeabi_memset ; 0xf0
    _memset$wrapper
        0x00000102:    b510        ..      PUSH     {r4,lr}
        0x00000104:    4613        .F      MOV      r3,r2
        0x00000106:    460a        .F      MOV      r2,r1
        0x00000108:    4604        .F      MOV      r4,r0
        0x0000010a:    4619        .F      MOV      r1,r3
        0x0000010c:    f7fffff0    ....    BL       __aeabi_memset ; 0xf0
        0x00000110:    4620         F      MOV      r0,r4
        0x00000112:    bd10        ..      POP      {r4,pc}
    .text
    __aeabi_uidiv
    __aeabi_uidivmod
        0x00000114:    b570        p.      PUSH     {r4-r6,lr}
        0x00000116:    4604        .F      MOV      r4,r0
        0x00000118:    2900        .)      CMP      r1,#0
        0x0000011a:    d003        ..      BEQ      0x124 ; __aeabi_uidiv + 16
        0x0000011c:    2000        .       MOVS     r0,#0
        0x0000011e:    2220         "      MOVS     r2,#0x20
        0x00000120:    2301        .#      MOVS     r3,#1
        0x00000122:    e010        ..      B        0x146 ; __aeabi_uidiv + 50
        0x00000124:    2800        .(      CMP      r0,#0
        0x00000126:    d001        ..      BEQ      0x12c ; __aeabi_uidiv + 24
        0x00000128:    2000        .       MOVS     r0,#0
        0x0000012a:    43c0        .C      MVNS     r0,r0
        0x0000012c:    46c0        .F      MOV      r8,r8
        0x0000012e:    46c0        .F      MOV      r8,r8
        0x00000130:    e00d        ..      B        0x14e ; __aeabi_uidiv + 58
        0x00000132:    4625        %F      MOV      r5,r4
        0x00000134:    40d5        .@      LSRS     r5,r5,r2
        0x00000136:    428d        .B      CMP      r5,r1
        0x00000138:    d305        ..      BCC      0x146 ; __aeabi_uidiv + 50
        0x0000013a:    460d        .F      MOV      r5,r1
        0x0000013c:    4095        .@      LSLS     r5,r5,r2
        0x0000013e:    1b64        d.      SUBS     r4,r4,r5
        0x00000140:    461d        .F      MOV      r5,r3
        0x00000142:    4095        .@      LSLS     r5,r5,r2
        0x00000144:    1940        @.      ADDS     r0,r0,r5
        0x00000146:    4615        .F      MOV      r5,r2
        0x00000148:    1e52        R.      SUBS     r2,r2,#1
        0x0000014a:    2d00        .-      CMP      r5,#0
        0x0000014c:    dcf1        ..      BGT      0x132 ; __aeabi_uidiv + 30
        0x0000014e:    4621        !F      MOV      r1,r4
        0x00000150:    bd70        p.      POP      {r4-r6,pc}
        0x00000152:    0000        ..      MOVS     r0,r0
    .text
    __scatterload
    __scatterload_rt2
        0x00000154:    b51c        ..      PUSH     {r2-r4,lr}
        0x00000156:    4809        .H      LDR      r0,[pc,#36] ; [0x17c] = 0xfdc
        0x00000158:    9000        ..      STR      r0,[sp,#0]
        0x0000015a:    4809        .H      LDR      r0,[pc,#36] ; [0x180] = 0xffc
        0x0000015c:    9001        ..      STR      r0,[sp,#4]
        0x0000015e:    4605        .F      MOV      r5,r0
        0x00000160:    2601        .&      MOVS     r6,#1
        0x00000162:    9c00        ..      LDR      r4,[sp,#0]
        0x00000164:    e005        ..      B        0x172 ; __scatterload + 30
        0x00000166:    68e3        .h      LDR      r3,[r4,#0xc]
        0x00000168:    cc07        ..      LDM      r4!,{r0-r2}
        0x0000016a:    4333        3C      ORRS     r3,r3,r6
        0x0000016c:    3c0c        .<      SUBS     r4,r4,#0xc
        0x0000016e:    4798        .G      BLX      r3
        0x00000170:    3410        .4      ADDS     r4,r4,#0x10
        0x00000172:    42ac        .B      CMP      r4,r5
        0x00000174:    d3f7        ..      BCC      0x166 ; __scatterload + 18
        0x00000176:    f7ffffa7    ....    BL       __main_after_scatterload ; 0xc8
    $d
        0x0000017a:    0000        ..      DCW    0
        0x0000017c:    00000fdc    ....    DCD    4060
        0x00000180:    00000ffc    ....    DCD    4092
    $t.1
    BSP_LED_Init
;;; ../../../../Common\cs32l015_starterkit.c (1200)
        0x00000184:    b570        p.      PUSH     {r4-r6,lr}
        0x00000186:    b08e        ..      SUB      sp,sp,#0x38
        0x00000188:    4604        .F      MOV      r4,r0
        0x0000018a:    a801        ..      ADD      r0,sp,#4
        0x0000018c:    2134        4!      MOVS     r1,#0x34
        0x0000018e:    f7ffffb6    ....    BL       __aeabi_memclr ; 0xfe
        0x00000192:    2c00        .,      CMP      r4,#0
        0x00000194:    d108        ..      BNE      0x1a8 ; BSP_LED_Init + 36
        0x00000196:    480f        .H      LDR      r0,[pc,#60] ; [0x1d4] = 0x40020008
        0x00000198:    6801        .h      LDR      r1,[r0,#0]
        0x0000019a:    2201        ."      MOVS     r2,#1
        0x0000019c:    4311        .C      ORRS     r1,r1,r2
        0x0000019e:    6001        .`      STR      r1,[r0,#0]
        0x000001a0:    6800        .h      LDR      r0,[r0,#0]
        0x000001a2:    4010        .@      ANDS     r0,r0,r2
        0x000001a4:    9000        ..      STR      r0,[sp,#0]
        0x000001a6:    9800        ..      LDR      r0,[sp,#0]
        0x000001a8:    2400        .$      MOVS     r4,#0
        0x000001aa:    9409        ..      STR      r4,[sp,#0x24]
        0x000001ac:    9408        ..      STR      r4,[sp,#0x20]
        0x000001ae:    9405        ..      STR      r4,[sp,#0x14]
        0x000001b0:    9404        ..      STR      r4,[sp,#0x10]
        0x000001b2:    2001        .       MOVS     r0,#1
        0x000001b4:    9002        ..      STR      r0,[sp,#8]
        0x000001b6:    2504        .%      MOVS     r5,#4
        0x000001b8:    9501        ..      STR      r5,[sp,#4]
        0x000001ba:    9003        ..      STR      r0,[sp,#0xc]
        0x000001bc:    4e0a        .N      LDR      r6,[pc,#40] ; [0x1e8] = 0x40021000
        0x000001be:    a901        ..      ADD      r1,sp,#4
        0x000001c0:    4630        0F      MOV      r0,r6
        0x000001c2:    f000f815    ....    BL       HAL_GPIO_Init ; 0x1f0
        0x000001c6:    4630        0F      MOV      r0,r6
        0x000001c8:    4629        )F      MOV      r1,r5
        0x000001ca:    4622        "F      MOV      r2,r4
        0x000001cc:    f000f908    ....    BL       HAL_GPIO_WritePin ; 0x3e0
        0x000001d0:    b00e        ..      ADD      sp,sp,#0x38
        0x000001d2:    bd70        p.      POP      {r4-r6,pc}
    $d.2
    __arm_cp.1_0
        0x000001d4:    40020008    ...@    DCD    1073872904
    $t.5
    BSP_LED_On
;;; ../../../../Common\cs32l015_starterkit.c (239)
        0x000001d8:    b580        ..      PUSH     {r7,lr}
        0x000001da:    4803        .H      LDR      r0,[pc,#12] ; [0x1e8] = 0x40021000
        0x000001dc:    2104        .!      MOVS     r1,#4
        0x000001de:    2201        ."      MOVS     r2,#1
        0x000001e0:    f000f8fe    ....    BL       HAL_GPIO_WritePin ; 0x3e0
        0x000001e4:    bd80        ..      POP      {r7,pc}
        0x000001e6:    46c0        .F      MOV      r8,r8
    $d.6
    __arm_cp.3_0
        0x000001e8:    40021000    ...@    DCD    1073876992
    $t.10
    Error_Handler
;;; ../Src\main.c
;;;246    
        0x000001ec:    be01        ..      BKPT     #1
        0x000001ee:    4770        pG      BX       lr
    HAL_GPIO_Init
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_gpio.c (7654)
        0x000001f0:    b5f0        ..      PUSH     {r4-r7,lr}
        0x000001f2:    b089        ..      SUB      sp,sp,#0x24
        0x000001f4:    4602        .F      MOV      r2,r0
        0x000001f6:    3248        H2      ADDS     r2,r2,#0x48
        0x000001f8:    9200        ..      STR      r2,[sp,#0]
        0x000001fa:    4602        .F      MOV      r2,r0
        0x000001fc:    324c        L2      ADDS     r2,r2,#0x4c
        0x000001fe:    9201        ..      STR      r2,[sp,#4]
        0x00000200:    2400        .$      MOVS     r4,#0
        0x00000202:    4623        #F      MOV      r3,r4
        0x00000204:    4626        &F      MOV      r6,r4
        0x00000206:    9108        ..      STR      r1,[sp,#0x20]
        0x00000208:    e00a        ..      B        0x220 ; HAL_GPIO_Init + 48
        0x0000020a:    433d        =C      ORRS     r5,r5,r7
        0x0000020c:    6285        .b      STR      r5,[r0,#0x28]
        0x0000020e:    9908        ..      LDR      r1,[sp,#0x20]
        0x00000210:    9c06        ..      LDR      r4,[sp,#0x18]
        0x00000212:    9b07        ..      LDR      r3,[sp,#0x1c]
        0x00000214:    1ca4        ..      ADDS     r4,r4,#2
        0x00000216:    1d1b        ..      ADDS     r3,r3,#4
        0x00000218:    1c76        v.      ADDS     r6,r6,#1
        0x0000021a:    2e10        ..      CMP      r6,#0x10
        0x0000021c:    d100        ..      BNE      0x220 ; HAL_GPIO_Init + 48
        0x0000021e:    e0dd        ..      B        0x3dc ; HAL_GPIO_Init + 492
        0x00000220:    2501        .%      MOVS     r5,#1
        0x00000222:    462f        /F      MOV      r7,r5
        0x00000224:    40b7        .@      LSLS     r7,r7,r6
        0x00000226:    680a        .h      LDR      r2,[r1,#0]
        0x00000228:    423a        :B      TST      r2,r7
        0x0000022a:    d0f3        ..      BEQ      0x214 ; HAL_GPIO_Init + 36
        0x0000022c:    9503        ..      STR      r5,[sp,#0xc]
        0x0000022e:    6901        .i      LDR      r1,[r0,#0x10]
        0x00000230:    43b9        .C      BICS     r1,r1,r7
        0x00000232:    6101        .a      STR      r1,[r0,#0x10]
        0x00000234:    6a01        .j      LDR      r1,[r0,#0x20]
        0x00000236:    43b9        .C      BICS     r1,r1,r7
        0x00000238:    6201        .b      STR      r1,[r0,#0x20]
        0x0000023a:    6a41        Aj      LDR      r1,[r0,#0x24]
        0x0000023c:    43b9        .C      BICS     r1,r1,r7
        0x0000023e:    6241        Ab      STR      r1,[r0,#0x24]
        0x00000240:    6a81        .j      LDR      r1,[r0,#0x28]
        0x00000242:    43b9        .C      BICS     r1,r1,r7
        0x00000244:    6281        .b      STR      r1,[r0,#0x28]
        0x00000246:    221c        ."      MOVS     r2,#0x1c
        0x00000248:    401a        .@      ANDS     r2,r2,r3
        0x0000024a:    250f        .%      MOVS     r5,#0xf
        0x0000024c:    4095        .@      LSLS     r5,r5,r2
        0x0000024e:    2108        .!      MOVS     r1,#8
        0x00000250:    4031        1@      ANDS     r1,r1,r6
        0x00000252:    9104        ..      STR      r1,[sp,#0x10]
        0x00000254:    9307        ..      STR      r3,[sp,#0x1c]
        0x00000256:    d101        ..      BNE      0x25c ; HAL_GPIO_Init + 108
        0x00000258:    2148        H!      MOVS     r1,#0x48
        0x0000025a:    e000        ..      B        0x25e ; HAL_GPIO_Init + 110
        0x0000025c:    214c        L!      MOVS     r1,#0x4c
        0x0000025e:    5843        CX      LDR      r3,[r0,r1]
        0x00000260:    43ab        .C      BICS     r3,r3,r5
        0x00000262:    5043        CP      STR      r3,[r0,r1]
        0x00000264:    6801        .h      LDR      r1,[r0,#0]
        0x00000266:    43b9        .C      BICS     r1,r1,r7
        0x00000268:    6001        .`      STR      r1,[r0,#0]
        0x0000026a:    6b41        Ak      LDR      r1,[r0,#0x34]
        0x0000026c:    43b9        .C      BICS     r1,r1,r7
        0x0000026e:    6341        Ac      STR      r1,[r0,#0x34]
        0x00000270:    6c01        .l      LDR      r1,[r0,#0x40]
        0x00000272:    4339        9C      ORRS     r1,r1,r7
        0x00000274:    6401        .d      STR      r1,[r0,#0x40]
        0x00000276:    2303        .#      MOVS     r3,#3
        0x00000278:    40a3        .@      LSLS     r3,r3,r4
        0x0000027a:    6bc1        .k      LDR      r1,[r0,#0x3c]
        0x0000027c:    9305        ..      STR      r3,[sp,#0x14]
        0x0000027e:    4399        .C      BICS     r1,r1,r3
        0x00000280:    63c1        .c      STR      r1,[r0,#0x3c]
        0x00000282:    43e9        .C      MVNS     r1,r5
        0x00000284:    9102        ..      STR      r1,[sp,#8]
        0x00000286:    9908        ..      LDR      r1,[sp,#0x20]
        0x00000288:    684b        Kh      LDR      r3,[r1,#4]
        0x0000028a:    2b04        .+      CMP      r3,#4
        0x0000028c:    9306        ..      STR      r3,[sp,#0x18]
        0x0000028e:    d021        !.      BEQ      0x2d4 ; HAL_GPIO_Init + 228
        0x00000290:    2b03        .+      CMP      r3,#3
        0x00000292:    d013        ..      BEQ      0x2bc ; HAL_GPIO_Init + 204
        0x00000294:    2b02        .+      CMP      r3,#2
        0x00000296:    d12c        ,.      BNE      0x2f2 ; HAL_GPIO_Init + 258
        0x00000298:    9904        ..      LDR      r1,[sp,#0x10]
        0x0000029a:    2900        .)      CMP      r1,#0
        0x0000029c:    9901        ..      LDR      r1,[sp,#4]
        0x0000029e:    d100        ..      BNE      0x2a2 ; HAL_GPIO_Init + 178
        0x000002a0:    9900        ..      LDR      r1,[sp,#0]
        0x000002a2:    6809        .h      LDR      r1,[r1,#0]
        0x000002a4:    9b02        ..      LDR      r3,[sp,#8]
        0x000002a6:    4019        .@      ANDS     r1,r1,r3
        0x000002a8:    9b08        ..      LDR      r3,[sp,#0x20]
        0x000002aa:    6b1d        .k      LDR      r5,[r3,#0x30]
        0x000002ac:    4095        .@      LSLS     r5,r5,r2
        0x000002ae:    430d        .C      ORRS     r5,r5,r1
        0x000002b0:    9904        ..      LDR      r1,[sp,#0x10]
        0x000002b2:    2900        .)      CMP      r1,#0
        0x000002b4:    d025        %.      BEQ      0x302 ; HAL_GPIO_Init + 274
        0x000002b6:    9901        ..      LDR      r1,[sp,#4]
        0x000002b8:    600d        .`      STR      r5,[r1,#0]
        0x000002ba:    e02a        *.      B        0x312 ; HAL_GPIO_Init + 290
        0x000002bc:    9a04        ..      LDR      r2,[sp,#0x10]
        0x000002be:    2a00        .*      CMP      r2,#0
        0x000002c0:    9901        ..      LDR      r1,[sp,#4]
        0x000002c2:    d100        ..      BNE      0x2c6 ; HAL_GPIO_Init + 214
        0x000002c4:    9900        ..      LDR      r1,[sp,#0]
        0x000002c6:    6809        .h      LDR      r1,[r1,#0]
        0x000002c8:    4329        )C      ORRS     r1,r1,r5
        0x000002ca:    2a00        .*      CMP      r2,#0
        0x000002cc:    d016        ..      BEQ      0x2fc ; HAL_GPIO_Init + 268
        0x000002ce:    9a01        ..      LDR      r2,[sp,#4]
        0x000002d0:    6011        .`      STR      r1,[r2,#0]
        0x000002d2:    e01e        ..      B        0x312 ; HAL_GPIO_Init + 290
        0x000002d4:    9a04        ..      LDR      r2,[sp,#0x10]
        0x000002d6:    2a00        .*      CMP      r2,#0
        0x000002d8:    9901        ..      LDR      r1,[sp,#4]
        0x000002da:    d100        ..      BNE      0x2de ; HAL_GPIO_Init + 238
        0x000002dc:    9900        ..      LDR      r1,[sp,#0]
        0x000002de:    6809        .h      LDR      r1,[r1,#0]
        0x000002e0:    9d02        ..      LDR      r5,[sp,#8]
        0x000002e2:    4029        )@      ANDS     r1,r1,r5
        0x000002e4:    2a00        .*      CMP      r2,#0
        0x000002e6:    9a08        ..      LDR      r2,[sp,#0x20]
        0x000002e8:    9d03        ..      LDR      r5,[sp,#0xc]
        0x000002ea:    d00d        ..      BEQ      0x308 ; HAL_GPIO_Init + 280
        0x000002ec:    9b01        ..      LDR      r3,[sp,#4]
        0x000002ee:    6019        .`      STR      r1,[r3,#0]
        0x000002f0:    e011        ..      B        0x316 ; HAL_GPIO_Init + 294
        0x000002f2:    6802        .h      LDR      r2,[r0,#0]
        0x000002f4:    2b01        .+      CMP      r3,#1
        0x000002f6:    d10a        ..      BNE      0x30e ; HAL_GPIO_Init + 286
        0x000002f8:    433a        :C      ORRS     r2,r2,r7
        0x000002fa:    e009        ..      B        0x310 ; HAL_GPIO_Init + 288
        0x000002fc:    9a00        ..      LDR      r2,[sp,#0]
        0x000002fe:    6011        .`      STR      r1,[r2,#0]
        0x00000300:    e007        ..      B        0x312 ; HAL_GPIO_Init + 290
        0x00000302:    9900        ..      LDR      r1,[sp,#0]
        0x00000304:    600d        .`      STR      r5,[r1,#0]
        0x00000306:    e004        ..      B        0x312 ; HAL_GPIO_Init + 290
        0x00000308:    9b00        ..      LDR      r3,[sp,#0]
        0x0000030a:    6019        .`      STR      r1,[r3,#0]
        0x0000030c:    e003        ..      B        0x316 ; HAL_GPIO_Init + 294
        0x0000030e:    43ba        .C      BICS     r2,r2,r7
        0x00000310:    6002        .`      STR      r2,[r0,#0]
        0x00000312:    9a08        ..      LDR      r2,[sp,#0x20]
        0x00000314:    9d03        ..      LDR      r5,[sp,#0xc]
        0x00000316:    6913        .i      LDR      r3,[r2,#0x10]
        0x00000318:    2b01        .+      CMP      r3,#1
        0x0000031a:    d106        ..      BNE      0x32a ; HAL_GPIO_Init + 314
        0x0000031c:    6991        .i      LDR      r1,[r2,#0x18]
        0x0000031e:    6b82        .k      LDR      r2,[r0,#0x38]
        0x00000320:    430a        .C      ORRS     r2,r2,r1
        0x00000322:    6382        .c      STR      r2,[r0,#0x38]
        0x00000324:    6b42        Bk      LDR      r2,[r0,#0x34]
        0x00000326:    433a        :C      ORRS     r2,r2,r7
        0x00000328:    e00c        ..      B        0x344 ; HAL_GPIO_Init + 340
        0x0000032a:    6951        Qi      LDR      r1,[r2,#0x14]
        0x0000032c:    6b42        Bk      LDR      r2,[r0,#0x34]
        0x0000032e:    43ba        .C      BICS     r2,r2,r7
        0x00000330:    6342        Bc      STR      r2,[r0,#0x34]
        0x00000332:    2901        .)      CMP      r1,#1
        0x00000334:    d107        ..      BNE      0x346 ; HAL_GPIO_Init + 342
        0x00000336:    6b81        .k      LDR      r1,[r0,#0x38]
        0x00000338:    2210        ."      MOVS     r2,#0x10
        0x0000033a:    4391        .C      BICS     r1,r1,r2
        0x0000033c:    6381        .c      STR      r1,[r0,#0x38]
        0x0000033e:    07e9        ..      LSLS     r1,r5,#31
        0x00000340:    6b42        Bk      LDR      r2,[r0,#0x34]
        0x00000342:    430a        .C      ORRS     r2,r2,r1
        0x00000344:    6342        Bc      STR      r2,[r0,#0x34]
        0x00000346:    9905        ..      LDR      r1,[sp,#0x14]
        0x00000348:    43ca        .C      MVNS     r2,r1
        0x0000034a:    43f9        .C      MVNS     r1,r7
        0x0000034c:    9105        ..      STR      r1,[sp,#0x14]
        0x0000034e:    6b41        Ak      LDR      r1,[r0,#0x34]
        0x00000350:    4625        %F      MOV      r5,r4
        0x00000352:    0409        ..      LSLS     r1,r1,#16
        0x00000354:    d004        ..      BEQ      0x360 ; HAL_GPIO_Init + 368
        0x00000356:    0119        ..      LSLS     r1,r3,#4
        0x00000358:    6b83        .k      LDR      r3,[r0,#0x38]
        0x0000035a:    430b        .C      ORRS     r3,r3,r1
        0x0000035c:    6383        .c      STR      r3,[r0,#0x38]
        0x0000035e:    e003        ..      B        0x368 ; HAL_GPIO_Init + 376
        0x00000360:    6b81        .k      LDR      r1,[r0,#0x38]
        0x00000362:    2310        .#      MOVS     r3,#0x10
        0x00000364:    4399        .C      BICS     r1,r1,r3
        0x00000366:    6381        .c      STR      r1,[r0,#0x38]
        0x00000368:    6bc4        .k      LDR      r4,[r0,#0x3c]
        0x0000036a:    4014        .@      ANDS     r4,r4,r2
        0x0000036c:    9908        ..      LDR      r1,[sp,#0x20]
        0x0000036e:    688b        .h      LDR      r3,[r1,#8]
        0x00000370:    40ab        .@      LSLS     r3,r3,r5
        0x00000372:    4323        #C      ORRS     r3,r3,r4
        0x00000374:    63c3        .c      STR      r3,[r0,#0x3c]
        0x00000376:    6844        Dh      LDR      r4,[r0,#4]
        0x00000378:    9a05        ..      LDR      r2,[sp,#0x14]
        0x0000037a:    4014        .@      ANDS     r4,r4,r2
        0x0000037c:    68cb        .h      LDR      r3,[r1,#0xc]
        0x0000037e:    40b3        .@      LSLS     r3,r3,r6
        0x00000380:    4323        #C      ORRS     r3,r3,r4
        0x00000382:    6043        C`      STR      r3,[r0,#4]
        0x00000384:    6c04        .l      LDR      r4,[r0,#0x40]
        0x00000386:    4014        .@      ANDS     r4,r4,r2
        0x00000388:    69cb        .i      LDR      r3,[r1,#0x1c]
        0x0000038a:    40b3        .@      LSLS     r3,r3,r6
        0x0000038c:    4323        #C      ORRS     r3,r3,r4
        0x0000038e:    6403        .d      STR      r3,[r0,#0x40]
        0x00000390:    6c44        Dl      LDR      r4,[r0,#0x44]
        0x00000392:    4014        .@      ANDS     r4,r4,r2
        0x00000394:    6a0b        .j      LDR      r3,[r1,#0x20]
        0x00000396:    40b3        .@      LSLS     r3,r3,r6
        0x00000398:    4323        #C      ORRS     r3,r3,r4
        0x0000039a:    462c        ,F      MOV      r4,r5
        0x0000039c:    6443        Cd      STR      r3,[r0,#0x44]
        0x0000039e:    9b06        ..      LDR      r3,[sp,#0x18]
        0x000003a0:    00db        ..      LSLS     r3,r3,#3
        0x000003a2:    9b07        ..      LDR      r3,[sp,#0x1c]
        0x000003a4:    d400        ..      BMI      0x3a8 ; HAL_GPIO_Init + 440
        0x000003a6:    e735        5.      B        0x214 ; HAL_GPIO_Init + 36
        0x000003a8:    9406        ..      STR      r4,[sp,#0x18]
        0x000003aa:    6904        .i      LDR      r4,[r0,#0x10]
        0x000003ac:    4014        .@      ANDS     r4,r4,r2
        0x000003ae:    6a4b        Kj      LDR      r3,[r1,#0x24]
        0x000003b0:    40b3        .@      LSLS     r3,r3,r6
        0x000003b2:    4323        #C      ORRS     r3,r3,r4
        0x000003b4:    6103        .a      STR      r3,[r0,#0x10]
        0x000003b6:    6a04        .j      LDR      r4,[r0,#0x20]
        0x000003b8:    4014        .@      ANDS     r4,r4,r2
        0x000003ba:    6a8b        .j      LDR      r3,[r1,#0x28]
        0x000003bc:    40b3        .@      LSLS     r3,r3,r6
        0x000003be:    4323        #C      ORRS     r3,r3,r4
        0x000003c0:    6203        .b      STR      r3,[r0,#0x20]
        0x000003c2:    6acb        .j      LDR      r3,[r1,#0x2c]
        0x000003c4:    6a85        .j      LDR      r5,[r0,#0x28]
        0x000003c6:    2b01        .+      CMP      r3,#1
        0x000003c8:    d900        ..      BLS      0x3cc ; HAL_GPIO_Init + 476
        0x000003ca:    e71e        ..      B        0x20a ; HAL_GPIO_Init + 26
        0x000003cc:    4015        .@      ANDS     r5,r5,r2
        0x000003ce:    6285        .b      STR      r5,[r0,#0x28]
        0x000003d0:    40b3        .@      LSLS     r3,r3,r6
        0x000003d2:    6a41        Aj      LDR      r1,[r0,#0x24]
        0x000003d4:    4011        .@      ANDS     r1,r1,r2
        0x000003d6:    4319        .C      ORRS     r1,r1,r3
        0x000003d8:    6241        Ab      STR      r1,[r0,#0x24]
        0x000003da:    e718        ..      B        0x20e ; HAL_GPIO_Init + 30
        0x000003dc:    b009        ..      ADD      sp,sp,#0x24
        0x000003de:    bdf0        ..      POP      {r4-r7,pc}
    HAL_GPIO_WritePin
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_gpio.c (707)
        0x000003e0:    2a00        .*      CMP      r2,#0
        0x000003e2:    d002        ..      BEQ      0x3ea ; HAL_GPIO_WritePin + 10
        0x000003e4:    222c        ,"      MOVS     r2,#0x2c
        0x000003e6:    5081        .P      STR      r1,[r0,r2]
        0x000003e8:    4770        pG      BX       lr
        0x000003ea:    2230        0"      MOVS     r2,#0x30
        0x000003ec:    5081        .P      STR      r1,[r0,r2]
        0x000003ee:    4770        pG      BX       lr
    HAL_GetTick
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal.c
;;;127     * @note   SysTick is used as time base for the HAL_Delay() function, the application
        0x000003f0:    4805        .H      LDR      r0,[pc,#20] ; [0x408] = 0x20000184
        0x000003f2:    6800        .h      LDR      r0,[r0,#0]
        0x000003f4:    4770        pG      BX       lr
        0x000003f6:    46c0        .F      MOV      r8,r8
    HAL_IncTick
;;;128     *         need to ensure that the SysTick time base is always set to 1 millisecond
;;;129     *         to have correct HAL operation.
;;;130     * @retval HAL status
;;;131     */
;;;132    HAL_StatusTypeDef HAL_Init(void)
;;;133    {
;;;134        /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
;;;135        HAL_InitTick(TICK_INT_PRIORITY);
;;;136    
;;;137        /* Init the low level hardware */
;;;138        HAL_MspInit();
;;;139    
;;;140        /* Return function status */
;;;141        return HAL_OK;
;;;142    }
;;;143    
;;;144    /**
;;;145     * @brief This function de-Initializes common part of the HAL and stops the systick.
;;;146     *        of time base.
;;;147     * @note This function is optional.
;;;148     * @retval HAL status
;;;149     */
;;;150    HAL_StatusTypeDef HAL_DeInit(void)
;;;151    {
;;;152        /* Reset of all peripherals */
;;;153        __HAL_RCC_CRC_FORCE_RESET();
;;;154        __HAL_RCC_CRC_RELEASE_RESET();
;;;155    
;;;156        __HAL_RCC_GPIOD_FORCE_RESET();
;;;157        __HAL_RCC_GPIOD_RELEASE_RESET();
;;;158    
;;;159        __HAL_RCC_GPIOC_FORCE_RESET();
;;;160        __HAL_RCC_GPIOC_RELEASE_RESET();
;;;161    
;;;162        __HAL_RCC_GPIOB_FORCE_RESET();
;;;163        __HAL_RCC_GPIOB_RELEASE_RESET();
;;;164    
;;;165        __HAL_RCC_GPIOA_FORCE_RESET();
;;;166        __HAL_RCC_GPIOA_RELEASE_RESET();
;;;167    
;;;168        __HAL_RCC_DBG_FORCE_RESET();
;;;169        __HAL_RCC_DBG_RELEASE_RESET();
;;;170    
;;;171        __HAL_RCC_BEEP_FORCE_RESET();
;;;172        __HAL_RCC_BEEP_RELEASE_RESET();
;;;173    
;;;174        __HAL_RCC_LVDVC_FORCE_RESET();
;;;175        __HAL_RCC_LVDVC_RELEASE_RESET();
;;;176    
;;;177        __HAL_RCC_CLKTRIM_FORCE_RESET();
;;;178        __HAL_RCC_CLKTRIM_RELEASE_RESET();
;;;179    
;;;180        __HAL_RCC_AWT_FORCE_RESET();
;;;181        __HAL_RCC_AWT_RELEASE_RESET();
;;;182    
;;;183        __HAL_RCC_ADC_FORCE_RESET();
;;;184        __HAL_RCC_ADC_RELEASE_RESET();
;;;185    
;;;186        __HAL_RCC_WWDT_FORCE_RESET();
;;;187        __HAL_RCC_WWDT_RELEASE_RESET();
;;;188    
;;;189        __HAL_RCC_TIM1_FORCE_RESET();
;;;190        __HAL_RCC_TIM1_RELEASE_RESET();
;;;191    
;;;192        __HAL_RCC_TIM2_FORCE_RESET();
;;;193        __HAL_RCC_TIM2_RELEASE_RESET();
;;;194    
;;;195        __HAL_RCC_OWI_FORCE_RESET();
;;;196        __HAL_RCC_OWI_RELEASE_RESET();
;;;197    
;;;198        __HAL_RCC_PCA_FORCE_RESET();
;;;199        __HAL_RCC_PCA_RELEASE_RESET();
;;;200    
;;;201        __HAL_RCC_SYSCON_FORCE_RESET();
;;;202        __HAL_RCC_SYSCON_RELEASE_RESET();
;;;203    
;;;204        __HAL_RCC_BASETIM_FORCE_RESET();
;;;205        __HAL_RCC_BASETIM_RELEASE_RESET();
;;;206    
;;;207        __HAL_RCC_LPTIM_FORCE_RESET();
;;;208        __HAL_RCC_LPTIM_RELEASE_RESET();
;;;209    
;;;210        __HAL_RCC_LPUART_FORCE_RESET();
;;;211        __HAL_RCC_LPUART_RELEASE_RESET();
;;;212    
;;;213        __HAL_RCC_I2C0_FORCE_RESET();
;;;214        __HAL_RCC_I2C0_RELEASE_RESET();
;;;215    
;;;216        __HAL_RCC_UART1_FORCE_RESET();
;;;217        __HAL_RCC_UART1_RELEASE_RESET();
;;;218    
;;;219        __HAL_RCC_UART0_FORCE_RESET();
;;;220        __HAL_RCC_UART0_RELEASE_RESET();
;;;221    
;;;222        __HAL_RCC_TIM3_FORCE_RESET();
;;;223        __HAL_RCC_TIM3_RELEASE_RESET();
;;;224    
;;;225        __HAL_RCC_TIM4_FORCE_RESET();
;;;226        __HAL_RCC_TIM4_RELEASE_RESET();
;;;227    
;;;228        __HAL_RCC_TIM5_FORCE_RESET();
;;;229        __HAL_RCC_TIM5_RELEASE_RESET();
;;;230    
;;;231        __HAL_RCC_TIM7_FORCE_RESET();
;;;232        __HAL_RCC_TIM7_RELEASE_RESET();
;;;233    
;;;234        __HAL_RCC_TIM8_FORCE_RESET();
;;;235        __HAL_RCC_TIM8_RELEASE_RESET();
;;;236    
;;;237        __HAL_RCC_I2C1_FORCE_RESET();
;;;238        __HAL_RCC_I2C1_RELEASE_RESET();
;;;239    
;;;240        __HAL_RCC_UART2_FORCE_RESET();
;;;241        __HAL_RCC_UART2_RELEASE_RESET();
;;;242    
;;;243        __HAL_RCC_UART3_FORCE_RESET();
;;;244        __HAL_RCC_UART3_RELEASE_RESET();
        0x000003f8:    4878        xH      LDR      r0,[pc,#480] ; [0x5dc] = 0x2000000e
        0x000003fa:    7800        .x      LDRB     r0,[r0,#0]
        0x000003fc:    4902        .I      LDR      r1,[pc,#8] ; [0x408] = 0x20000184
        0x000003fe:    680a        .h      LDR      r2,[r1,#0]
        0x00000400:    1810        ..      ADDS     r0,r2,r0
        0x00000402:    6008        .`      STR      r0,[r1,#0]
        0x00000404:    4770        pG      BX       lr
        0x00000406:    46c0        .F      MOV      r8,r8
    $d.8
    __arm_cp.5_1
        0x00000408:    20000184    ...     DCD    536871300
    $t.0
    HAL_Init
;;;245    
;;;246        __HAL_RCC_SPI0_FORCE_RESET();
;;;247        __HAL_RCC_SPI0_RELEASE_RESET();
;;;248    
;;;249        __HAL_RCC_SPI1_FORCE_RESET();
;;;250        __HAL_RCC_SPI1_RELEASE_RESET();
;;;251    
;;;252    
;;;253        /* De-Init the low level hardware */
;;;254        HAL_MspDeInit();
;;;255    
;;;256        /* Return function status */
;;;257        return HAL_OK;
;;;258    }
;;;259    
;;;260    /**
;;;261     * @brief  Initialize the MSP.
;;;262     * @retval None
;;;263     */
;;;264    __weak void HAL_MspInit(void)
;;;265    {
;;;266        /* NOTE : This function should not be modified, when the callback is needed,
;;;267                  the HAL_MspInit could be implemented in the user fil;e
;;;268         */
;;;269    }
;;;270    
;;;271    /**
;;;272     * @brief  DeInitializes the MSP.
;;;273     * @retval None
;;;274     */
;;;275    __weak void HAL_MspDeInit(void)
;;;276    {
;;;277        /* NOTE : This function should not be modified, when the callback is needed,
;;;278                  the HAL_MspDeInit could be implemented in the user file
;;;279         */
;;;280    }
;;;281    
;;;282    /**
;;;283     * @brief This function configures the source of the time base.
;;;284     *        The time source is configured to have 1ms time base with a dedicated
;;;285     *        Tick interrupt priority.
;;;286     * @note This function is called  automatically at the beginning of program after
;;;287     *       reset by HAL_Init() or at any time when clock is reconfigured by HAL_RCC_ClockConfig().
;;;288     * @note In the default implementation, SysTick timer is the source of time base.
;;;289     *       It is used to generate interrupts at regular time intervals.
;;;290     *       Care must be taken if HAL_Delay() is called from a peripheral ISR process,
;;;291     *       The SysTick interrupt must have higher priority (numerically lower)
;;;292     *       than the peripheral interrupt. Otherwise the caller ISR process will be blocked.
;;;293     *       The function is declared as __weak to be overwritten in case of other
;;;294     *       implementation in user file.
;;;295     * @param TickPriority Tick interrupt priority.
;;;296     * @retval HAL status
;;;297     */
;;;298    __weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
;;;299    {
;;;300        /* Configure the SysTick to have interrupt in 1ms time basis*/
;;;301        if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
;;;302        {
;;;303            return HAL_ERROR;
;;;304        }
;;;305    
;;;306        /* Configure the SysTick IRQ priority */
;;;307        if (TickPriority < (1UL << __NVIC_PRIO_BITS))
;;;308        {
;;;309            HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority);
;;;310            uwTickPrio = TickPriority;
;;;311        }
;;;312        else
;;;313        {
;;;314            return HAL_ERROR;
;;;315        }
;;;316    
;;;317        /* Return function status */
;;;318        return HAL_OK;
;;;319    }
;;;320    
;;;321    /**
;;;322     * @}
;;;323     */ /* End of group HAL_Exported_Functions_Group1 */
;;;324    
;;;325    /** @defgroup HAL_Exported_Functions_Group2 HAL Control functions
;;;326     *  @brief    HAL Control functions
;;;327     *
;;;328     @verbatim
;;;329     ===============================================================================
;;;330                          ##### HAL Control functions #####
;;;331     ===============================================================================
;;;332        [..]  This section provides functions allowing to:
;;;333          (+) Provide a tick value in millisecond
;;;334          (+) Provide a blocking delay in millisecond
;;;335          (+) Suspend the time base source interrupt
;;;336          (+) Resume the time base source interrupt
;;;337          (+) Get the HAL API driver version
;;;338          (+) Get the device identifier
;;;339          (+) Get the device revision identifier
;;;340          (+) Enable/Disable Debug module during SLEEP mode
;;;341          (+) Enable/Disable Debug module during STOP mode
;;;342          (+) Enable/Disable Debug module during STANDBY mode
;;;343    
;;;344    @endverbatim
;;;345     * @{
;;;346     */
;;;347    
;;;348    /**
;;;349     * @brief This function is called to increment a global variable "uwTick"
;;;350     *        used as application time base.
;;;351     * @note In the default implementation, this variable is incremented each 1ms
;;;352     *       in SysTick ISR.
        0x0000040c:    b580        ..      PUSH     {r7,lr}
        0x0000040e:    2003        .       MOVS     r0,#3
        0x00000410:    f000f804    ....    BL       HAL_InitTick ; 0x41c
        0x00000414:    f000f822    ..".    BL       HAL_MspInit ; 0x45c
        0x00000418:    2000        .       MOVS     r0,#0
        0x0000041a:    bd80        ..      POP      {r7,pc}
    HAL_InitTick
;;;353     * @note This function is declared as __weak to be overwritten in case of other
;;;354     *      implementations in user file.
;;;355     * @retval None
;;;356     */
;;;357    __weak void HAL_IncTick(void)
;;;358    {
;;;359        uwTick += uwTickFreq;
;;;360    }
;;;361    
;;;362    /**
;;;363     * @brief Provides a tick value in millisecond.
;;;364     * @note  This function is declared as __weak to be overwritten in case of other
;;;365     *       implementations in user file.
;;;366     * @retval tick value
;;;367     */
;;;368    __weak uint32_t HAL_GetTick(void)
;;;369    {
;;;370        return uwTick;
;;;371    }
;;;372    
;;;373    /**
;;;374     * @brief This function returns a tick priority.
;;;375     * @retval tick priority
;;;376     */
;;;377    uint32_t HAL_GetTickPrio(void)
;;;378    {
;;;379        return uwTickPrio;
;;;380    }
;;;381    
;;;382    /**
;;;383     * @brief Set new tick Freq.
;;;384     * @retval Status
;;;385     */
;;;386    HAL_StatusTypeDef HAL_SetTickFreq(HAL_TickFreqTypeDef Freq)
;;;387    {
;;;388        HAL_StatusTypeDef status  = HAL_OK;
;;;389        assert_param(IS_TICKFREQ(Freq));
;;;390    
;;;391        if (uwTickFreq != Freq)
;;;392        {
;;;393            uwTickFreq = Freq;
;;;394    
;;;395            /* Apply the new tick Freq  */
;;;396            status = HAL_InitTick(uwTickPrio);
;;;397        }
;;;398    
;;;399        return status;
;;;400    }
;;;401    
;;;402    /**
;;;403     * @brief Return tick frequency.
;;;404     * @retval tick period in Hz
;;;405     */
;;;406    HAL_TickFreqTypeDef HAL_GetTickFreq(void)
;;;407    {
;;;408        return uwTickFreq;
;;;409    }
;;;410    
;;;411    /**
;;;412     * @brief This function provides minimum delay (in milliseconds) based
;;;413     *        on variable incremented.
;;;414     * @note In the default implementation, SysTick timer is the source of time base.
;;;415     *       It is used to generate interrupts at regular time intervals where uwTick
;;;416     *       is incremented.
;;;417     * @note This function is declared as __weak to be overwritten in case of other
;;;418     *       implementations in user file.
;;;419     * @param Delay specifies the delay time length, in milliseconds.
;;;420     * @retval None
;;;421     */
;;;422    __weak void HAL_Delay(uint32_t Delay)
;;;423    {
;;;424        uint32_t tickstart = HAL_GetTick();
;;;425        uint32_t wait = Delay;
;;;426    
;;;427        /* Add a freq to guarantee minimum wait */
;;;428        if (wait < HAL_MAX_DELAY)
;;;429        {
;;;430            wait += (uint32_t)(uwTickFreq);
;;;431        }
;;;432    
;;;433        while ((HAL_GetTick() - tickstart) < wait)
;;;434        {
;;;435        }
;;;436    }
;;;437    
;;;438    /**
;;;439     * @brief Suspend Tick increment.
;;;440     * @note In the default implementation , SysTick timer is the source of time base. It is
;;;441     *       used to generate interrupts at regular time intervals. Once HAL_SuspendTick()
;;;442     *       is called, the SysTick interrupt will be disabled and so Tick increment
;;;443     *       is suspended.
;;;444     * @note This function is declared as __weak to be overwritten in case of other
;;;445     *       implementations in user file.
;;;446     * @retval None
;;;447     */
;;;448    __weak void HAL_SuspendTick(void)
;;;449    {
;;;450        /* Disable SysTick Interrupt */
;;;451        CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
;;;452    }
;;;453    
;;;454    /**
;;;455     * @brief Resume Tick increment.
;;;456     * @note In the default implementation, SysTick timer is the source of time base. It is
;;;457     *       used to generate interrupts at regular time intervals. Once HAL_ResumeTick()
;;;458     *       is called, the SysTick interrupt will be enabled and so Tick increment
;;;459     *       is resumed.
;;;460     * @note This function is declared as __weak to be overwritten in case of other
;;;461     *       implementations in user file.
;;;462     * @retval None
;;;463     */
;;;464    __weak void HAL_ResumeTick(void)
;;;465    {
;;;466        /* Enable SysTick Interrupt */
;;;467        SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
;;;468    }
;;;469    
;;;470    /**
;;;471     * @brief  Returns the HAL revision
;;;472     * @retval version 0xXYZR (8bits for each decimal, R for RC)
;;;473     */
;;;474    uint32_t HAL_GetHalVersion(void)
;;;475    {
;;;476        return __CS32L015_HAL_VERSION;
;;;477    }
;;;478    
;;;479    /**
;;;480     * @brief Returns the device revision identifier.
;;;481     * Note:
;;;482     *       Address 0x180000F0-0x180000FF are unique ID for CS32L015.
;;;483     *             Refer to function HAL_GetUNID(uint32_t *UNID)
;;;484     * @retval Device revision identifier address, 16 bytes(4 words)
;;;485     */
;;;486    uint32_t HAL_GetREVID(void)
;;;487    {
;;;488        return (0);
;;;489    }
;;;490    
;;;491    /**
;;;492     * @brief  Returns the device identifier.
;;;493     * Note:
;;;494     *       Address 0x180000F0-0x180000FF are unique ID for CS32L015.
;;;495     *             Refer to function HAL_GetUNID(uint32_t *UNID)
;;;496     * @retval Device identifier
;;;497     */
;;;498    uint32_t HAL_GetDEVID(void)
;;;499    {
;;;500        return (0);
;;;501    }
;;;502    
;;;503    /**
;;;504     * @brief  Enable the Debug Module during SLEEP mode
;;;505     * @retval None
;;;506     */
;;;507    void HAL_DBGMCU_EnableDBGSleepMode(void)
;;;508    {
;;;509        __HAL_SYSCON_DBGDEEPSLEEP_ENABLE();
;;;510    }
;;;511    
;;;512    /**
;;;513     * @brief  Disable the Debug Module during SLEEP mode
;;;514     * Note:
;;;515     * @retval None
;;;516     */
;;;517    void HAL_DBGMCU_DisableDBGSleepMode(void)
;;;518    {
;;;519        __HAL_SYSCON_DBGDEEPSLEEP_DISABLE();
;;;520    }
;;;521    
;;;522    
;;;523    /**
;;;524     * @brief Return the unique device identifier (UNID based on 128 bits)
;;;525     * @param UNID pointer to 4 words array.
;;;526     * Note:
;;;527     *       Address 0x180000F0-0x180000FF are unique ID for CS32L015.
;;;528     * @retval Device identifier
;;;529     */
;;;530    void HAL_GetUNID(uint32_t *UNID)
;;;531    {
;;;532        UNID[0] = (uint32_t)(READ_REG(*((uint32_t *)DEV_UNID_BASE)));
;;;533        UNID[1] = (uint32_t)(READ_REG(*((uint32_t *)(DEV_UNID_BASE + 4U))));
;;;534        UNID[2] = (uint32_t)(READ_REG(*((uint32_t *)(DEV_UNID_BASE + 8U))));
;;;535        UNID[3] = (uint32_t)(READ_REG(*((uint32_t *)(DEV_UNID_BASE + 12U))));
;;;536    }
;;;537    
;;;538    /**
;;;539     * @}
;;;540     */ /* End of group HAL_Exported_Functions_Group2 */
;;;541    
;;;542    /**
;;;543     * @}
;;;544     */ /* End of group HAL_Exported_Functions */
;;;545    
;;;546    #endif  /* HAL_MODULE_ENABLED */
;;;547    
;;;548    /**
;;;549     * @}
;;;550     */ /* End of group HAL */
;;;551    
;;;552    /**
;;;553     * @}
;;;554     */ /* group CS32L015_HAL_Driver */
        0x0000041c:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x0000041e:    4604        .F      MOV      r4,r0
        0x00000420:    207d        }       MOVS     r0,#0x7d
        0x00000422:    00c0        ..      LSLS     r0,r0,#3
        0x00000424:    496d        mI      LDR      r1,[pc,#436] ; [0x5dc] = 0x2000000e
        0x00000426:    7809        .x      LDRB     r1,[r1,#0]
        0x00000428:    f7fffe74    ..t.    BL       __aeabi_uidiv ; 0x114
        0x0000042c:    4601        .F      MOV      r1,r0
        0x0000042e:    486e        nH      LDR      r0,[pc,#440] ; [0x5e8] = 0x20000000
        0x00000430:    6800        .h      LDR      r0,[r0,#0]
        0x00000432:    f7fffe6f    ..o.    BL       __aeabi_uidiv ; 0x114
        0x00000436:    f000fac5    ....    BL       HAL_SYSTICK_Config ; 0x9c4
        0x0000043a:    2501        .%      MOVS     r5,#1
        0x0000043c:    2c03        .,      CMP      r4,#3
        0x0000043e:    d808        ..      BHI      0x452 ; HAL_InitTick + 54
        0x00000440:    2800        .(      CMP      r0,#0
        0x00000442:    d106        ..      BNE      0x452 ; HAL_InitTick + 54
        0x00000444:    2500        .%      MOVS     r5,#0
        0x00000446:    43e8        .C      MVNS     r0,r5
        0x00000448:    4621        !F      MOV      r1,r4
        0x0000044a:    f000f808    ....    BL       HAL_NVIC_SetPriority ; 0x45e
        0x0000044e:    4802        .H      LDR      r0,[pc,#8] ; [0x458] = 0x20000010
        0x00000450:    6004        .`      STR      r4,[r0,#0]
        0x00000452:    4628        (F      MOV      r0,r5
        0x00000454:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x00000456:    46c0        .F      MOV      r8,r8
    $d.2
    __arm_cp.1_2
        0x00000458:    20000010    ...     DCD    536870928
    $t.0
    HAL_MspInit
;;; ../Src\cs32l015_hal_msp.c
;;;29      *                the configuration information for the specified UART module.
        0x0000045c:    4770        pG      BX       lr
    HAL_NVIC_SetPriority
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_cortex.c
;;;210     */
        0x0000045e:    b580        ..      PUSH     {r7,lr}
        0x00000460:    f000fca0    ....    BL       __NVIC_SetPriority ; 0xda4
        0x00000464:    bd80        ..      POP      {r7,pc}
        0x00000466:    0000        ..      MOVS     r0,r0
    HAL_RCC_ClockConfig
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_rcc.c (4721)
        0x00000468:    b5f0        ..      PUSH     {r4-r7,lr}
        0x0000046a:    b081        ..      SUB      sp,sp,#4
        0x0000046c:    4604        .F      MOV      r4,r0
        0x0000046e:    6800        .h      LDR      r0,[r0,#0]
        0x00000470:    0781        ..      LSLS     r1,r0,#30
        0x00000472:    4e54        TN      LDR      r6,[pc,#336] ; [0x5c4] = 0x40020024
        0x00000474:    d511        ..      BPL      0x49a ; HAL_RCC_ClockConfig + 50
        0x00000476:    0741        A.      LSLS     r1,r0,#29
        0x00000478:    d507        ..      BPL      0x48a ; HAL_RCC_ClockConfig + 34
        0x0000047a:    4631        1F      MOV      r1,r6
        0x0000047c:    3920         9      SUBS     r1,r1,#0x20
        0x0000047e:    680a        .h      LDR      r2,[r1,#0]
        0x00000480:    23ff        .#      MOVS     r3,#0xff
        0x00000482:    439a        .C      BICS     r2,r2,r3
        0x00000484:    68e3        .h      LDR      r3,[r4,#0xc]
        0x00000486:    4313        .C      ORRS     r3,r3,r2
        0x00000488:    600b        .`      STR      r3,[r1,#0]
        0x0000048a:    4631        1F      MOV      r1,r6
        0x0000048c:    3924        $9      SUBS     r1,r1,#0x24
        0x0000048e:    680a        .h      LDR      r2,[r1,#0]
        0x00000490:    23ff        .#      MOVS     r3,#0xff
        0x00000492:    439a        .C      BICS     r2,r2,r3
        0x00000494:    68a3        .h      LDR      r3,[r4,#8]
        0x00000496:    4313        .C      ORRS     r3,r3,r2
        0x00000498:    600b        .`      STR      r3,[r1,#0]
        0x0000049a:    07c0        ..      LSLS     r0,r0,#31
        0x0000049c:    d126        &.      BNE      0x4ec ; HAL_RCC_ClockConfig + 132
        0x0000049e:    7820         x      LDRB     r0,[r4,#0]
        0x000004a0:    0740        @.      LSLS     r0,r0,#29
        0x000004a2:    d507        ..      BPL      0x4b4 ; HAL_RCC_ClockConfig + 76
        0x000004a4:    4630        0F      MOV      r0,r6
        0x000004a6:    3820         8      SUBS     r0,r0,#0x20
        0x000004a8:    6801        .h      LDR      r1,[r0,#0]
        0x000004aa:    22ff        ."      MOVS     r2,#0xff
        0x000004ac:    4391        .C      BICS     r1,r1,r2
        0x000004ae:    68e2        .h      LDR      r2,[r4,#0xc]
        0x000004b0:    430a        .C      ORRS     r2,r2,r1
        0x000004b2:    6002        .`      STR      r2,[r0,#0]
        0x000004b4:    3e24        $>      SUBS     r6,r6,#0x24
        0x000004b6:    6830        0h      LDR      r0,[r6,#0]
        0x000004b8:    0605        ..      LSLS     r5,r0,#24
        0x000004ba:    f000f8a5    ....    BL       HAL_RCC_GetSysClockFreq ; 0x608
        0x000004be:    2d00        .-      CMP      r5,#0
        0x000004c0:    d004        ..      BEQ      0x4cc ; HAL_RCC_ClockConfig + 100
        0x000004c2:    0840        @.      LSRS     r0,r0,#1
        0x000004c4:    6831        1h      LDR      r1,[r6,#0]
        0x000004c6:    b2c9        ..      UXTB     r1,r1
        0x000004c8:    f7fffe24    ..$.    BL       __aeabi_uidiv ; 0x114
        0x000004cc:    4946        FI      LDR      r1,[pc,#280] ; [0x5e8] = 0x20000000
        0x000004ce:    6008        .`      STR      r0,[r1,#0]
        0x000004d0:    6860        `h      LDR      r0,[r4,#4]
        0x000004d2:    2808        .(      CMP      r0,#8
        0x000004d4:    d001        ..      BEQ      0x4da ; HAL_RCC_ClockConfig + 114
        0x000004d6:    2804        .(      CMP      r0,#4
        0x000004d8:    d102        ..      BNE      0x4e0 ; HAL_RCC_ClockConfig + 120
        0x000004da:    4840        @H      LDR      r0,[pc,#256] ; [0x5dc] = 0x2000000e
        0x000004dc:    210a        .!      MOVS     r1,#0xa
        0x000004de:    7001        .p      STRB     r1,[r0,#0]
        0x000004e0:    2003        .       MOVS     r0,#3
        0x000004e2:    f7ffff9b    ....    BL       HAL_InitTick ; 0x41c
        0x000004e6:    2000        .       MOVS     r0,#0
        0x000004e8:    b001        ..      ADD      sp,sp,#4
        0x000004ea:    bdf0        ..      POP      {r4-r7,pc}
        0x000004ec:    6860        `h      LDR      r0,[r4,#4]
        0x000004ee:    2804        .(      CMP      r0,#4
        0x000004f0:    d007        ..      BEQ      0x502 ; HAL_RCC_ClockConfig + 154
        0x000004f2:    2802        .(      CMP      r0,#2
        0x000004f4:    d032        2.      BEQ      0x55c ; HAL_RCC_ClockConfig + 244
        0x000004f6:    2801        .(      CMP      r0,#1
        0x000004f8:    d136        6.      BNE      0x568 ; HAL_RCC_ClockConfig + 256
        0x000004fa:    6871        qh      LDR      r1,[r6,#4]
        0x000004fc:    04c9        ..      LSLS     r1,r1,#19
        0x000004fe:    d403        ..      BMI      0x508 ; HAL_RCC_ClockConfig + 160
        0x00000500:    e02f        /.      B        0x562 ; HAL_RCC_ClockConfig + 250
        0x00000502:    68f1        .h      LDR      r1,[r6,#0xc]
        0x00000504:    04c9        ..      LSLS     r1,r1,#19
        0x00000506:    d52c        ,.      BPL      0x562 ; HAL_RCC_ClockConfig + 250
        0x00000508:    492f        /I      LDR      r1,[pc,#188] ; [0x5c8] = 0x55aa6698
        0x0000050a:    1c4a        J.      ADDS     r2,r1,#1
        0x0000050c:    63f2        .c      STR      r2,[r6,#0x3c]
        0x0000050e:    4a2f        /J      LDR      r2,[pc,#188] ; [0x5cc] = 0xa596000f
        0x00000510:    4010        .@      ANDS     r0,r0,r2
        0x00000512:    6832        2h      LDR      r2,[r6,#0]
        0x00000514:    4b2e        .K      LDR      r3,[pc,#184] ; [0x5d0] = 0xfff0
        0x00000516:    4013        .@      ANDS     r3,r3,r2
        0x00000518:    18c0        ..      ADDS     r0,r0,r3
        0x0000051a:    4a2e        .J      LDR      r2,[pc,#184] ; [0x5d4] = 0x5a690000
        0x0000051c:    1880        ..      ADDS     r0,r0,r2
        0x0000051e:    6030        0`      STR      r0,[r6,#0]
        0x00000520:    63f1        .c      STR      r1,[r6,#0x3c]
        0x00000522:    f7ffff65    ..e.    BL       HAL_GetTick ; 0x3f0
        0x00000526:    4605        .F      MOV      r5,r0
        0x00000528:    6860        `h      LDR      r0,[r4,#4]
        0x0000052a:    1e40        @.      SUBS     r0,r0,#1
        0x0000052c:    2807        .(      CMP      r0,#7
        0x0000052e:    d8b6        ..      BHI      0x49e ; HAL_RCC_ClockConfig + 54
        0x00000530:    4478        xD      ADD      r0,r0,pc
        0x00000532:    7900        .y      LDRB     r0,[r0,#4]
        0x00000534:    0040        @.      LSLS     r0,r0,#1
        0x00000536:    4487        .D      ADD      pc,pc,r0
    $d.7
        0x00000538:    28031b04    ...(    DCD    671292164
        0x0000053c:    36030303    ...6    DCD    906167043
    $t.8
        0x00000540:    e7ad        ..      B        0x49e ; HAL_RCC_ClockConfig + 54
        0x00000542:    4f25        %O      LDR      r7,[pc,#148] ; [0x5d8] = 0x1388
        0x00000544:    6830        0h      LDR      r0,[r6,#0]
        0x00000546:    210f        .!      MOVS     r1,#0xf
        0x00000548:    4001        .@      ANDS     r1,r1,r0
        0x0000054a:    2901        .)      CMP      r1,#1
        0x0000054c:    d0a7        ..      BEQ      0x49e ; HAL_RCC_ClockConfig + 54
        0x0000054e:    f7ffff4f    ..O.    BL       HAL_GetTick ; 0x3f0
        0x00000552:    1b41        A.      SUBS     r1,r0,r5
        0x00000554:    2003        .       MOVS     r0,#3
        0x00000556:    42b9        .B      CMP      r1,r7
        0x00000558:    d9f4        ..      BLS      0x544 ; HAL_RCC_ClockConfig + 220
        0x0000055a:    e7c5        ..      B        0x4e8 ; HAL_RCC_ClockConfig + 128
        0x0000055c:    68b1        .h      LDR      r1,[r6,#8]
        0x0000055e:    0649        I.      LSLS     r1,r1,#25
        0x00000560:    d4d2        ..      BMI      0x508 ; HAL_RCC_ClockConfig + 160
        0x00000562:    2001        .       MOVS     r0,#1
        0x00000564:    b001        ..      ADD      sp,sp,#4
        0x00000566:    bdf0        ..      POP      {r4-r7,pc}
        0x00000568:    6931        1i      LDR      r1,[r6,#0x10]
        0x0000056a:    0649        I.      LSLS     r1,r1,#25
        0x0000056c:    d5f9        ..      BPL      0x562 ; HAL_RCC_ClockConfig + 250
        0x0000056e:    e7cb        ..      B        0x508 ; HAL_RCC_ClockConfig + 160
        0x00000570:    4f19        .O      LDR      r7,[pc,#100] ; [0x5d8] = 0x1388
        0x00000572:    6830        0h      LDR      r0,[r6,#0]
        0x00000574:    210f        .!      MOVS     r1,#0xf
        0x00000576:    4001        .@      ANDS     r1,r1,r0
        0x00000578:    2902        .)      CMP      r1,#2
        0x0000057a:    d090        ..      BEQ      0x49e ; HAL_RCC_ClockConfig + 54
        0x0000057c:    f7ffff38    ..8.    BL       HAL_GetTick ; 0x3f0
        0x00000580:    1b41        A.      SUBS     r1,r0,r5
        0x00000582:    2003        .       MOVS     r0,#3
        0x00000584:    42b9        .B      CMP      r1,r7
        0x00000586:    d9f4        ..      BLS      0x572 ; HAL_RCC_ClockConfig + 266
        0x00000588:    e7ae        ..      B        0x4e8 ; HAL_RCC_ClockConfig + 128
        0x0000058a:    4f13        .O      LDR      r7,[pc,#76] ; [0x5d8] = 0x1388
        0x0000058c:    6830        0h      LDR      r0,[r6,#0]
        0x0000058e:    210f        .!      MOVS     r1,#0xf
        0x00000590:    4001        .@      ANDS     r1,r1,r0
        0x00000592:    2904        .)      CMP      r1,#4
        0x00000594:    d100        ..      BNE      0x598 ; HAL_RCC_ClockConfig + 304
        0x00000596:    e782        ..      B        0x49e ; HAL_RCC_ClockConfig + 54
        0x00000598:    f7ffff2a    ..*.    BL       HAL_GetTick ; 0x3f0
        0x0000059c:    1b41        A.      SUBS     r1,r0,r5
        0x0000059e:    2003        .       MOVS     r0,#3
        0x000005a0:    42b9        .B      CMP      r1,r7
        0x000005a2:    d9f3        ..      BLS      0x58c ; HAL_RCC_ClockConfig + 292
        0x000005a4:    e7a0        ..      B        0x4e8 ; HAL_RCC_ClockConfig + 128
        0x000005a6:    4f0c        .O      LDR      r7,[pc,#48] ; [0x5d8] = 0x1388
        0x000005a8:    6830        0h      LDR      r0,[r6,#0]
        0x000005aa:    210f        .!      MOVS     r1,#0xf
        0x000005ac:    4001        .@      ANDS     r1,r1,r0
        0x000005ae:    2908        .)      CMP      r1,#8
        0x000005b0:    d100        ..      BNE      0x5b4 ; HAL_RCC_ClockConfig + 332
        0x000005b2:    e774        t.      B        0x49e ; HAL_RCC_ClockConfig + 54
        0x000005b4:    f7ffff1c    ....    BL       HAL_GetTick ; 0x3f0
        0x000005b8:    1b41        A.      SUBS     r1,r0,r5
        0x000005ba:    2003        .       MOVS     r0,#3
        0x000005bc:    42b9        .B      CMP      r1,r7
        0x000005be:    d9f3        ..      BLS      0x5a8 ; HAL_RCC_ClockConfig + 320
        0x000005c0:    e792        ..      B        0x4e8 ; HAL_RCC_ClockConfig + 128
        0x000005c2:    46c0        .F      MOV      r8,r8
    $d.9
    __arm_cp.3_0
        0x000005c4:    40020024    $..@    DCD    1073872932
    __arm_cp.3_1
        0x000005c8:    55aa6698    .f.U    DCD    1437230744
    __arm_cp.3_2
        0x000005cc:    a596000f    ....    DCD    2778071055
    __arm_cp.3_3
        0x000005d0:    0000fff0    ....    DCD    65520
    __arm_cp.3_4
        0x000005d4:    5a690000    ..iZ    DCD    1516830720
    __arm_cp.3_5
        0x000005d8:    00001388    ....    DCD    5000
    __arm_cp.3_7
        0x000005dc:    2000000e    ...     DCD    536870926
    $t.14
    HAL_RCC_GetHCLKFreq
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_rcc.c (127)
        0x000005e0:    4801        .H      LDR      r0,[pc,#4] ; [0x5e8] = 0x20000000
        0x000005e2:    6800        .h      LDR      r0,[r0,#0]
        0x000005e4:    4770        pG      BX       lr
        0x000005e6:    46c0        .F      MOV      r8,r8
    $d.15
    __arm_cp.6_0
        0x000005e8:    20000000    ...     DCD    536870912
    $t.16
    HAL_RCC_GetPCLKFreq
;;;128        uint32_t tickstart;
;;;129    
;;;130        /* Get Start Tick */
;;;131        tickstart = HAL_GetTick();
;;;132    
;;;133        /* Set HRCEN bit */
;;;134        __HAL_RCC_HRC_ENABLE();
;;;135    
;;;136        /* Wait till HSI is ready */
;;;137        while (READ_BIT(RCC->HRCCR, RCC_HRCCR_HRCRDY) == RESET)
;;;138        {
;;;139            if ((HAL_GetTick() - tickstart) > HRC_TIMEOUT_VALUE)
;;;140            {
;;;141                return HAL_TIMEOUT;
;;;142            }
;;;143        }
;;;144    
;;;145        /* Get Start Tick */
;;;146        tickstart = HAL_GetTick();
;;;147    
;;;148        /* Reset SYSCLKSEL register */
;;;149        __HAL_RCC_SYSCLK_CONFIG(RCC_SYSCLKSOURCE_HRC);
;;;150    
;;;151        /* Wait till clock switch is ready */
;;;152        while (READ_BIT(RCC->SYSCLKSEL, RCC_SYSCLKSOURCE_HRC) != RESET)
;;;153        {
;;;154            if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;155            {
;;;156                return HAL_TIMEOUT;
;;;157            }
;;;158        }
;;;159    
;;;160        /* Update the SystemCoreClock global variable */
;;;161        SystemCoreClock = HRC_VALUE_4M;
;;;162    
;;;163        /* Adapt Systick interrupt period */
;;;164        if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
;;;165        {
;;;166            return HAL_ERROR;
;;;167        }
;;;168    
;;;169        /* Get Start Tick */
;;;170        tickstart = HAL_GetTick();
;;;171    
;;;172        /* Reset HXTEN & HXTBYP bits */
;;;173        __HAL_RCC_HXT_CONFIG(RCC_HXT_DEFAULT);
;;;174    
;;;175        /* Wait till HXT is disabled */
;;;176        while (READ_BIT(RCC->HXTCR, RCC_HXTCR_HXTRDY) != RESET)
;;;177        {
;;;178            if ((HAL_GetTick() - tickstart) > HXT_TIMEOUT_VALUE)
;;;179            {
;;;180                return HAL_TIMEOUT;
;;;181            }
;;;182        }
;;;183    
;;;184        /* Get Start Tick */
;;;185        tickstart = HAL_GetTick();
;;;186    
;;;187        /* Reset LRCEN bits */
;;;188        __HAL_RCC_LRC_DISABLE();
;;;189    
;;;190        /* Wait till LRC is disabled */
;;;191        while (READ_BIT(RCC->LRCCR, RCC_LRCCR_LRCRDY) != RESET)
;;;192        {
;;;193            if ((HAL_GetTick() - tickstart) > LRC_TIMEOUT_VALUE)
;;;194            {
;;;195                return HAL_TIMEOUT;
;;;196            }
;;;197        }
;;;198    
;;;199        CLEAR_REG(RCC->MCOCR);
;;;200    
;;;201        return HAL_OK;
;;;202    }
;;;203    
;;;204    /**
;;;205     * @brief  Initializes the RCC Oscillators according to the specified parameters in the
;;;206     *         RCC_OscInitTypeDef.
;;;207     * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that
;;;208     *         contains the configuration information for the RCC Oscillators.
;;;209     * @note   IMPORTANT! PACKAGE Macro SHOULD be defined to select the right calibaration value if TSSOP-20 and QFN-20 packaged
;;;210     *                   products are used. Otherwise if the KGD(wafer) products are used, the PACKAGE Macro SHOULD NOT be defined. For more
;;;211     *                   details please refer to chapter 6.4.10 in User Manual.
;;;212     * @retval HAL status
;;;213     */
;;;214    HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
;;;215    {
;;;216        uint32_t tickstart = 0U;
;;;217    
;;;218        /* Check the parameters */
;;;219        assert_param(RCC_OscInitStruct != NULL);
;;;220        assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;221    
;;;222        /*----------------------------- HRC Configuration --------------------------*/
;;;223        if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HRC) == RCC_OSCILLATORTYPE_HRC)
;;;224        {
;;;225            /* Check the parameters */
;;;226            assert_param(IS_RCC_HRC(RCC_OscInitStruct->HRCState));
;;;227            assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HRCCalibrationValue));
;;;228    
;;;229            /* Check if HRC is used as system clock*/
;;;230            if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HRC)
;;;231            {
;;;232                /* When HRC is used as system clock it will not disabled */
;;;233                if((__HAL_RCC_GET_FLAG(RCC_FLAG_HRCRDY) != SET) && ((RCC_OscInitStruct->HRCState) != RCC_HRC_ON))
;;;234                {
;;;235                    return HAL_ERROR;
;;;236                }
;;;237                /* Otherwise, just the calibration is allowed */
;;;238                else
;;;239                {
;;;240                    /* Adjusts the Internal High Speed oscillator (HRC) calibration value.*/
;;;241                    __HAL_RCC_HRC_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HRCCalibrationValue);
;;;242                }
;;;243            }
;;;244            else
;;;245            {
;;;246                /* Check the HRC State */
;;;247                if(RCC_OscInitStruct->HRCState != RCC_HRC_OFF)
;;;248                {
;;;249                    /* Adjusts the Internal High Speed oscillator (HRC) calibration value.*/
;;;250                    __HAL_RCC_HRC_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HRCCalibrationValue);
;;;251    
;;;252                    /* Enable the Internal High Speed oscillator (HRC). */
;;;253                    __HAL_RCC_HRC_ENABLE();
;;;254    
;;;255                    /* Get Start Tick */
;;;256                    tickstart = HAL_GetTick();
;;;257    
;;;258                    /* Wait till HRC is ready */
;;;259                    while(__HAL_RCC_GET_FLAG(RCC_FLAG_HRCRDY) == RESET)
;;;260                    {
;;;261                        if((HAL_GetTick() - tickstart ) > HRC_TIMEOUT_VALUE)
;;;262                        {
;;;263                            return HAL_TIMEOUT;
;;;264                        }
;;;265                    }
;;;266                }
;;;267                else
;;;268                {
;;;269                    /* Disable the Internal High Speed oscillator (HRC). */
;;;270                    __HAL_RCC_HRC_DISABLE();
;;;271    
;;;272                    /* Get Start Tick */
;;;273                    tickstart = HAL_GetTick();
;;;274    
;;;275                    /* Wait till HRC is disabled */
;;;276                    while(__HAL_RCC_GET_FLAG(RCC_FLAG_HRCRDY) != RESET)
;;;277                    {
;;;278                        if((HAL_GetTick() - tickstart ) > HRC_TIMEOUT_VALUE)
;;;279                        {
;;;280                            return HAL_TIMEOUT;
;;;281                        }
;;;282                    }
;;;283                }
;;;284            }
;;;285        }
;;;286    
;;;287        /*------------------------------ LRC Configuration -------------------------*/
;;;288        if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LRC) == RCC_OSCILLATORTYPE_LRC)
;;;289        {
;;;290            /* Check the parameters */
;;;291            assert_param(IS_RCC_LRC(RCC_OscInitStruct->LRCState));
;;;292    
;;;293            /* Check the LRC State */
;;;294            if(RCC_OscInitStruct->LRCState != RCC_LRC_OFF)
;;;295            {
;;;296                __HAL_RCC_LRC_STARTUP_CONFIG(RCC_OscInitStruct->LRCStartupValue);
;;;297    
;;;298                /* Adjusts the Internal Low Speed oscillator (LRC) calibration value.*/
;;;299                __HAL_RCC_LRC_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->LRCCalibrationValue);
;;;300    
;;;301                /* Enable the Internal Low Speed oscillator (LRC). */
;;;302                __HAL_RCC_LRC_ENABLE();
;;;303    
;;;304                /* Get Start Tick */
;;;305                tickstart = HAL_GetTick();
;;;306    
;;;307                /* Wait till LRC is ready */
;;;308                while(__HAL_RCC_GET_FLAG(RCC_FLAG_LRCRDY) == RESET)
;;;309                {
;;;310                    if((HAL_GetTick() - tickstart ) > LRC_TIMEOUT_VALUE)
;;;311                    {
;;;312                        return HAL_TIMEOUT;
;;;313                    }
;;;314                }
;;;315                /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
;;;316                    should be added.*/
;;;317                RCC_Delay(1);
;;;318            }
;;;319            else
;;;320            {
;;;321                /* Disable the Internal Low Speed oscillator (LRC). */
;;;322                __HAL_RCC_LRC_DISABLE();
;;;323    
;;;324                /* Get Start Tick */
;;;325                tickstart = HAL_GetTick();
;;;326    
;;;327                /* Wait till LSI is disabled */
;;;328                while(__HAL_RCC_GET_FLAG(RCC_FLAG_LRCRDY) != RESET)
;;;329                {
;;;330                    if((HAL_GetTick() - tickstart ) > LRC_TIMEOUT_VALUE)
;;;331                    {
;;;332                        return HAL_TIMEOUT;
;;;333                    }
;;;334                }
;;;335            }
;;;336        }
;;;337        /*------------------------------- HXT Configuration ------------------------*/
;;;338        if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HXT) == RCC_OSCILLATORTYPE_HXT)
;;;339        {
;;;340            /* Check the parameters */
;;;341            assert_param(IS_RCC_HXT(RCC_OscInitStruct->HXTState));
;;;342    
;;;343            /* When the HXT is used as system clock */
;;;344            if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HXT)
;;;345            {
;;;346                if((__HAL_RCC_GET_FLAG(RCC_FLAG_HXTRDY) != RESET) && (RCC_OscInitStruct->HXTState == RCC_HXT_OFF))
;;;347                {
;;;348                    return HAL_ERROR;
;;;349                }
;;;350            }
;;;351            else
;;;352            {
;;;353                /* Set the new HXT configuration ---------------------------------------*/
;;;354                __HAL_RCC_HXT_CONFIG(RCC_OscInitStruct->HXTState);
;;;355    
;;;356                /* Check the HXT State */
;;;357                if(RCC_OscInitStruct->HXTState != RCC_HXT_OFF)
;;;358                {
;;;359                    /* Get Start Tick */
;;;360                    tickstart = HAL_GetTick();
;;;361    
;;;362                    /* Wait till HXT is ready */
;;;363                    while(__HAL_RCC_GET_FLAG(RCC_FLAG_HXTRDY) == RESET)
;;;364                    {
;;;365                        if((HAL_GetTick() - tickstart ) > HXT_TIMEOUT_VALUE)
;;;366                        {
;;;367                            return HAL_TIMEOUT;
;;;368                        }
;;;369                    }
;;;370                }
;;;371                else
;;;372                {
;;;373                    /* Get Start Tick */
;;;374                    tickstart = HAL_GetTick();
;;;375    
;;;376                    /* Wait till HXT is disabled */
        0x000005ec:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x000005ee:    4c05        .L      LDR      r4,[pc,#20] ; [0x604] = 0x40020004
        0x000005f0:    6825        %h      LDR      r5,[r4,#0]
        0x000005f2:    f7fffff5    ....    BL       HAL_RCC_GetHCLKFreq ; 0x5e0
        0x000005f6:    2d00        .-      CMP      r5,#0
        0x000005f8:    d003        ..      BEQ      0x602 ; HAL_RCC_GetPCLKFreq + 22
        0x000005fa:    0840        @.      LSRS     r0,r0,#1
        0x000005fc:    6821        !h      LDR      r1,[r4,#0]
        0x000005fe:    f7fffd89    ....    BL       __aeabi_uidiv ; 0x114
        0x00000602:    bdb0        ..      POP      {r4,r5,r7,pc}
    $d.17
    __arm_cp.7_0
        0x00000604:    40020004    ...@    DCD    1073872900
    $t.10
    HAL_RCC_GetSysClockFreq
;;;377                    while(__HAL_RCC_GET_FLAG(RCC_FLAG_HXTRDY) != RESET)
;;;378                    {
;;;379                        if((HAL_GetTick() - tickstart ) > HXT_TIMEOUT_VALUE)
;;;380                        {
;;;381                            return HAL_TIMEOUT;
;;;382                        }
;;;383                    }
;;;384                }
;;;385            }
;;;386        }
;;;387    
;;;388        /*------------------------------ LXT Configuration -------------------------*/
;;;389        if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LXT) == RCC_OSCILLATORTYPE_LXT)
;;;390        {
;;;391            /* Check the parameters */
;;;392            assert_param(IS_RCC_LXT(RCC_OscInitStruct->LXTState));
;;;393    
;;;394            /* Set the new LXT configuration -----------------------------------------*/
;;;395            __HAL_RCC_LXT_CONFIG(RCC_OscInitStruct->LXTState);
;;;396            /* Check the LSE State */
;;;397            if(RCC_OscInitStruct->LXTState != RCC_LXT_OFF)
;;;398            {
;;;399                /* Get Start Tick */
;;;400                tickstart = HAL_GetTick();
;;;401    
;;;402                /* Wait till LSE is ready */
;;;403                while(__HAL_RCC_GET_FLAG(RCC_FLAG_LXTRDY) == RESET)
;;;404                {
;;;405                    if((HAL_GetTick() - tickstart ) > RCC_LXT_TIMEOUT_VALUE)
;;;406                    {
;;;407                        return HAL_TIMEOUT;
;;;408                    }
;;;409                }
;;;410            }
;;;411            else
;;;412            {
;;;413                /* Get Start Tick */
;;;414                tickstart = HAL_GetTick();
;;;415    
;;;416                /* Wait till LSE is disabled */
;;;417                while(__HAL_RCC_GET_FLAG(RCC_FLAG_LXTRDY) != RESET)
;;;418                {
;;;419                    if((HAL_GetTick() - tickstart ) > RCC_LXT_TIMEOUT_VALUE)
;;;420                    {
;;;421                        return HAL_TIMEOUT;
;;;422                    }
;;;423                }
;;;424            }
;;;425        }
;;;426    
;;;427        return HAL_OK;
;;;428    }
;;;429    
;;;430    /**
;;;431     * @brief  Initializes the CPU, AHB and APB buses clocks according to the specified
;;;432     *         parameters in the RCC_ClkInitStruct.
;;;433     * @param  RCC_ClkInitStruct pointer to an RCC_OscInitTypeDef structure that
;;;434     *         contains the configuration information for the RCC peripheral.
;;;435     * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
;;;436     *         and updated by @ref HAL_RCC_GetHCLKFreq() function called within this function
;;;437     *
;;;438     * @note   A switch from one clock source to another occurs only if the target
;;;439     *         clock source is ready.
;;;440     *         If a clock source which is not yet ready is selected, the switch will
;;;441     *         occur when the clock source will be ready.
;;;442     *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
;;;443     *         currently used as system clock source.
;;;444     * @retval HAL status
;;;445     */
;;;446    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct)
;;;447    {
;;;448        uint32_t tickstart = 0U;
;;;449    
;;;450        /* Check the parameters */
;;;451        assert_param(RCC_ClkInitStruct != NULL);
;;;452        assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;453    
;;;454        /*-------------------------- HCLK Configuration --------------------------*/
;;;455        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;456        {
;;;457            /* Set the highest APBx dividers in order to ensure that we do not go through
;;;458            a non-spec phase whatever we decrease or increase HCLK. */
;;;459            if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK) == RCC_CLOCKTYPE_PCLK)
;;;460            {
;;;461                MODIFY_REG(RCC->PCLKDIV, RCC_PCLKDIV_APBCKDIV, RCC_ClkInitStruct->APBCLKDivider);
;;;462            }
;;;463    
;;;464            /* Set the new HCLK clock divider */
;;;465            assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;466            MODIFY_REG(RCC->HCLKDIV, RCC_HCLKDIV_AHBCKDIV, RCC_ClkInitStruct->AHBCLKDivider);
;;;467        }
;;;468    
;;;469        /*------------------------- SYSCLK Configuration ---------------------------*/
;;;470        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;471        {
;;;472            assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;473    
;;;474            /* HRC is selected as System Clock Source */
;;;475            if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HRC)
;;;476            {
;;;477                /* Check the HRC ready flag */
;;;478                if(__HAL_RCC_GET_FLAG(RCC_FLAG_HRCRDY) == RESET)
;;;479                {
;;;480                    return HAL_ERROR;
;;;481                }
;;;482            }
;;;483            /* HXT is selected as System Clock Source */
;;;484            else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HXT)
;;;485            {
;;;486                /* Check the HXT ready flag */
;;;487                if(__HAL_RCC_GET_FLAG(RCC_FLAG_HXTRDY) == RESET)
;;;488                {
;;;489                    return HAL_ERROR;
;;;490                }
;;;491            }
;;;492            /* LRC is selected as System Clock Source */
;;;493            else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LRC)
;;;494            {
;;;495                /* Check the LRC ready flag */
;;;496                if(__HAL_RCC_GET_FLAG(RCC_FLAG_LRCRDY) == RESET)
;;;497                {
;;;498                    return HAL_ERROR;
;;;499                }
;;;500            }
;;;501            else
;;;502            {
;;;503                /* Check the LXT ready flag */
;;;504                if(__HAL_RCC_GET_FLAG(RCC_FLAG_LXTRDY) == RESET)
;;;505                {
;;;506                    return HAL_ERROR;
;;;507                }
;;;508            }
;;;509            __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;510    
;;;511            /* Get Start Tick */
;;;512            tickstart = HAL_GetTick();
;;;513    
;;;514            if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HRC)
;;;515            {
;;;516                while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HRC)
;;;517                {
;;;518                    if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;519                    {
;;;520                        return HAL_TIMEOUT;
;;;521                    }
;;;522                }
;;;523            }
;;;524            else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HXT)
;;;525            {
;;;526                while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HXT)
;;;527                {
;;;528                    if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;529                    {
;;;530                        return HAL_TIMEOUT;
;;;531                    }
;;;532                }
;;;533            }
;;;534            else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LRC)
;;;535            {
;;;536                while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_LRC)
;;;537                {
;;;538                    if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;539                    {
;;;540                        return HAL_TIMEOUT;
;;;541                    }
;;;542                }
;;;543            }
;;;544            else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LXT)
;;;545            {
;;;546                while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_LXT)
;;;547                {
;;;548                    if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;549                    {
;;;550                        return HAL_TIMEOUT;
;;;551                    }
;;;552                }
;;;553            }
;;;554        }
;;;555    
;;;556        /*-------------------------- PCLK Configuration ---------------------------*/
;;;557        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK) == RCC_CLOCKTYPE_PCLK)
;;;558        {
;;;559            assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APBCLKDivider));
;;;560            MODIFY_REG(RCC->PCLKDIV, RCC_PCLKDIV_APBCKDIV, RCC_ClkInitStruct->APBCLKDivider);
;;;561        }
;;;562    
;;;563        /* Update the SystemCoreClock global variable */
;;;564        if((RCC->HCLKDIV & RCC_HCLKDIV_AHBCKDIV) != 0)
;;;565            SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> 1) / (RCC->HCLKDIV & RCC_HCLKDIV_AHBCKDIV);
;;;566        else
;;;567            SystemCoreClock = HAL_RCC_GetSysClockFreq();
;;;568    
;;;569        /* Configure system tick overflow to 100Hz because of low frequency of LXT or LRC*/
;;;570        if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LRC) || (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LXT))
;;;571        {
;;;572            uwTickFreq = HAL_TICK_FREQ_100HZ;
;;;573        }
;;;574        /* Configure the source of time base considering new system clocks settings*/
;;;575        HAL_InitTick (TICK_INT_PRIORITY);
;;;576    
;;;577        return HAL_OK;
;;;578    }
;;;579    
;;;580    /**
;;;581     * @}
;;;582     */ /*End of group RCC_Exported_Functions_Group1*/
;;;583    
;;;584    
;;;585    /** @defgroup RCC_Exported_Functions_Group2 Peripheral Control functions
;;;586     *  @brief   RCC clocks control functions
;;;587     *
;;;588     @verbatim
;;;589     ===============================================================================
;;;590                     ##### Peripheral Control functions #####
;;;591     ===============================================================================
;;;592       [..]
;;;593       This subsection provides a set of functions allowing to control the RCC Clocks
;;;594       frequencies.
;;;595    
;;;596     @endverbatim
;;;597     * @{
;;;598     */
;;;599    
;;;600    /**
;;;601     * @brief  Selects the clock source to output on MCO pin.
;;;602     * @note   MCO pin should be configured in alternate function mode.
;;;603     * @param  RCC_MCOx specifies the output direction for the clock source.
;;;604     *          This parameter can be one of the following values:
;;;605     *            @arg @ref RCC_MCOx Clock source to output on MCO pin(PC4/PC6).
;;;606     * @param  RCC_MCOSource specifies the clock source to output.
;;;607     *          This parameter can be one of the following values:
;;;608     *            @arg @ref RCC_MCOSOURCE_HRC     HRC selected as MCO clock
;;;609     *            @arg @ref RCC_MCOSOURCE_HXT      HXT selected as MCO clock
;;;610     *            @arg @ref RCC_MCOSOURCE_LRC     LRC selected as MCO clock
;;;611     *            @arg @ref RCC_MCOSOURCE_LXT      LXT selected as MCO clock
;;;612     *            @arg @ref RCC_MCOSOURCE_SYSCLK   SYSCLK selected as MCO clock
;;;613     *            @arg @ref RCC_MCOSOURCE_HCLK     HCLK selected as MCO clock
;;;614     *            @arg @ref RCC_MCOSOURCE_PCLK     PCLK selected as MCO clock
;;;615     * @param  RCC_MCODiv specifies the MCO DIV.
;;;616     *          This parameter can be one of the following values:
;;;617     *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
;;;618     * @retval None
;;;619     */
;;;620    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
;;;621    {
;;;622        GPIO_InitTypeDef gpio = {0U};
;;;623    
;;;624        /* Check the parameters */
;;;625        assert_param(IS_RCC_MCO(RCC_MCOx));
;;;626        assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;627        assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;628    
;;;629        /* Prevent unused argument(s) compilation warning */
;;;630        UNUSED(RCC_MCOx);
;;;631        UNUSED(RCC_MCODiv);
;;;632    
;;;633        /* Configure the MCO pin in alternate function mode */
;;;634        gpio.Mode      = GPIO_MODE_AF;
;;;635        gpio.SlewRate  = GPIO_SLEW_RATE_HIGH;
;;;636        gpio.Pull      = GPIO_NOPULL;
;;;637        gpio.Pin       = MCO_PIN;
;;;638        gpio.Alternate = MCO_GPIO_AF;
;;;639        /* MCO Clock Enable */
;;;640        MCO_CLK_ENABLE();
;;;641    
;;;642        HAL_GPIO_Init(MCO_GPIO_PORT, &gpio);
;;;643    
;;;644        /* Configure the MCO clock source */
;;;645        __HAL_RCC_MCO_CONFIG(RCC_MCOSource, RCC_MCODiv);
;;;646    }
;;;647    
;;;648    
;;;649    /**
;;;650     * @brief  Returns the SYSCLK frequency
;;;651     * @note   The system frequency computed by this function is not the real
;;;652     *         frequency in the chip. It is calculated based on the predefined
;;;653     *         constant and the selected clock source:
;;;654     * @note     If SYSCLK source is HRC, function returns values based on HRC_VALUE_xxM
;;;655     * @note     If SYSCLK source is HXT, function returns a value based on HXT_VALUE
;;;656     * @note     If SYSCLK source is LRC, function returns a value based on LRC_VALUE
;;;657     * @note     If SYSCLK source is LXT, function returns a value based on LXT_VALUE
;;;658     * @note     HRC_VALUE_xxM is a constant defined in cs32l015_hal_conf.h file (default value
;;;659     *           4 MHz) but the real value may vary depending on the variations in voltage and temperature.
;;;660     * @note     HXT_VALUE is a constant defined in cs32l015_hal_conf.h file (default value
;;;661     *           8 MHz), user has to ensure that HSE_VALUE is same as the real
;;;662     *           frequency of the crystal used. Otherwise, this function may
;;;663     *           have wrong result.
;;;664     * @note     LRC_VALUE is a constant defined in cs32l015_hal_conf.h file (default value
;;;665     *           38.4 KHz) but the real value may vary depending on the variations
;;;666     *           in voltage and temperature.
;;;667     * @note     LXT_VALUE is a constant defined in cs32l015_hal_conf.h file (default value
;;;668     *           32.768 KHz), user has to ensure that LXT_VALUE is same as the real
;;;669     *           frequency of the crystal used. Otherwise, this function may
;;;670     *           have wrong result.
;;;671     *
;;;672     * @note   This function can be used by the user application to compute the
;;;673     *         baud-rate for the communication peripherals or configure other parameters.
;;;674     *
;;;675     * @note   Each time SYSCLK changes, this function must be called to update the
;;;676     *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
;;;677     *
;;;678     * @retval SYSCLK frequency
;;;679     */
;;;680    uint32_t HAL_RCC_GetSysClockFreq(void)
;;;681    {
;;;682        uint32_t tmpreg = 0U;
;;;683        uint32_t sysclockfreq = 0U;
;;;684    
;;;685        tmpreg = RCC->SYSCLKSEL;
;;;686    
;;;687        /* Get SYSCLK source -------------------------------------------------------*/
;;;688        switch (tmpreg & RCC_SYSCLKSEL_CLKSW)
;;;689        {
;;;690            case RCC_SYSCLKSOURCE_STATUS_HRC:  /* HRC used as system clock */
;;;691                {
;;;692                    if((uint32_t)((RCC->HRCCR & RCC_HRCCR_HRCTRIM) >> RCC_HRCCR_HRCTRIM_Pos) == RCC_HRCCALIBRATION_24M)
;;;693                    {
;;;694                        sysclockfreq = HRC_VALUE_24M;
;;;695                    }
;;;696                    else if((uint32_t)((RCC->HRCCR & RCC_HRCCR_HRCTRIM) >> RCC_HRCCR_HRCTRIM_Pos) == RCC_HRCCALIBRATION_14_7456M)
;;;697                    {
;;;698                        sysclockfreq = HRC_VALUE_14_7456M;
;;;699                    }
;;;700                    else if((uint32_t)((RCC->HRCCR & RCC_HRCCR_HRCTRIM) >> RCC_HRCCR_HRCTRIM_Pos) == RCC_HRCCALIBRATION_4M)
;;;701                    {
;;;702                        sysclockfreq = HRC_VALUE_4M;
;;;703                    }
;;;704                    else
;;;705                    {
;;;706                        sysclockfreq = HRC_VALUE_4M;
;;;707                    }
;;;708                    break;
;;;709                }
;;;710            case RCC_SYSCLKSOURCE_STATUS_HXT:  /* HXT used as system clock */
;;;711                {
;;;712                    sysclockfreq = HXT_VALUE;
;;;713                    break;
;;;714                }
;;;715            case RCC_SYSCLKSOURCE_STATUS_LRC:  /* LRC used as system clock */
;;;716                {
;;;717                    sysclockfreq = LRC_VALUE;
;;;718                    break;
;;;719                }
;;;720            default: /* LXT used as system clock */
;;;721                {
;;;722                    sysclockfreq = LXT_VALUE;
;;;723                    break;
;;;724                }
;;;725        }
;;;726        return sysclockfreq;
;;;727    }
;;;728    
;;;729    /**
;;;730     * @brief  Returns the HCLK frequency
;;;731     * @note   Each time HCLK changes, this function must be called to update the
;;;732     *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
;;;733     *
;;;734     * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
;;;735     *         and updated within this function
;;;736     * @retval HCLK frequency
;;;737     */
;;;738    uint32_t HAL_RCC_GetHCLKFreq(void)
;;;739    {
;;;740        return SystemCoreClock;
;;;741    }
;;;742    
;;;743    /**
;;;744     * @brief  Returns the PCLK frequency
;;;745     * @note   Each time PCLK changes, this function must be called to update the
;;;746     *         right PCLK value. Otherwise, any configuration based on this function will be incorrect.
;;;747     * @retval PCLK frequency
;;;748     */
;;;749    uint32_t HAL_RCC_GetPCLKFreq(void)
;;;750    {
;;;751        /* Get HCLK source and Compute PCLK frequency ---------------------------*/
;;;752        if(RCC->PCLKDIV != 0)
;;;753            return ((HAL_RCC_GetHCLKFreq() >> 1) / RCC->PCLKDIV);
;;;754        else
;;;755            return (HAL_RCC_GetHCLKFreq());
;;;756    }
;;;757    
;;;758    
;;;759    /**
;;;760     * @brief  Configures the RCC_OscInitStruct according to the internal
;;;761     *          RCC configuration registers.
;;;762     * @param  RCC_OscInitStruct pointer to an RCC_OscInitTypeDef structure that will be configured.
;;;763     * @retval None
;;;764     */
;;;765    void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
;;;766    {
;;;767        /* Check the parameters */
;;;768        assert_param(RCC_OscInitStruct != NULL);
;;;769    
;;;770        /* Set all possible values for the Oscillator type parameter ---------------*/
;;;771        RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HRC | RCC_OSCILLATORTYPE_HXT  \
;;;772                                            | RCC_OSCILLATORTYPE_LXT | RCC_OSCILLATORTYPE_LRC;
;;;773    
;;;774        /* Get the HRC configuration -----------------------------------------------*/
;;;775        if((RCC->SYSCLKSEL & RCC_SYSCLKCR_HRCEN) == RCC_SYSCLKCR_HRCEN)
;;;776        {
;;;777            RCC_OscInitStruct->HRCState = RCC_HRC_ON;
;;;778        }
;;;779        else
;;;780        {
;;;781            RCC_OscInitStruct->HRCState = RCC_HRC_OFF;
;;;782        }
;;;783    
;;;784        /* Get the HXT configuration -----------------------------------------------*/
;;;785        if((RCC->SYSCLKSEL & RCC_SYSCLKCR_HXTBYP) == RCC_SYSCLKCR_HXTBYP)
;;;786        {
;;;787            RCC_OscInitStruct->HXTState = RCC_HXT_BYPASS;
;;;788        }
;;;789        else if((RCC->SYSCLKSEL & RCC_SYSCLKCR_HXTEN) == RCC_SYSCLKCR_HXTEN)
;;;790        {
;;;791            RCC_OscInitStruct->HXTState = RCC_HXT_ON;
;;;792        }
;;;793        else
;;;794        {
;;;795            RCC_OscInitStruct->HXTState = RCC_HXT_OFF;
;;;796        }
;;;797    
;;;798        RCC_OscInitStruct->HRCCalibrationValue = (uint32_t)((RCC->HRCCR & RCC_HRCCR_HRCTRIM) >> RCC_HRCCR_HRCTRIM_Pos);
;;;799    
;;;800        /* Get the LSI configuration -----------------------------------------------*/
;;;801        if((RCC->SYSCLKSEL & RCC_SYSCLKCR_LRCEN) == RCC_SYSCLKCR_LRCEN)
;;;802        {
;;;803            RCC_OscInitStruct->LRCState = RCC_LRC_ON;
;;;804        }
;;;805        else
;;;806        {
;;;807            RCC_OscInitStruct->LRCState = RCC_LRC_OFF;
;;;808        }
;;;809    
;;;810        /* Get the LXT configuration -----------------------------------------------*/
;;;811        if((RCC->LXTCR & RCC_LXTCR_LXTBYP) == RCC_LXTCR_LXTBYP)
;;;812        {
;;;813            RCC_OscInitStruct->LXTState = RCC_LXT_BYPASS;
;;;814        }
;;;815        else if((RCC->LXTCR & RCC_LXTCR_LXTEN) == RCC_LXTCR_LXTEN)
;;;816        {
;;;817            RCC_OscInitStruct->LXTState = RCC_LXT_ON;
;;;818        }
;;;819        else
;;;820        {
;;;821            RCC_OscInitStruct->LXTState = RCC_LXT_OFF;
;;;822        }
;;;823    }
;;;824    
;;;825    /**
;;;826     * @brief  Get the RCC_ClkInitStruct according to the internal
;;;827     *          RCC configuration registers.
;;;828     * @param  RCC_ClkInitStruct    pointer to an RCC_ClkInitTypeDef structure that
;;;829     *                                  contains the current clock configuration.
;;;830     * @retval None
;;;831     */
;;;832    void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct)
;;;833    {
;;;834        /* Check the parameters */
;;;835        assert_param(RCC_ClkInitStruct != NULL);
;;;836    
;;;837        /* Set all possible values for the Clock type parameter --------------------*/
;;;838        RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK;
;;;839    
;;;840        /* Get the SYSCLK configuration --------------------------------------------*/
;;;841        RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->SYSCLKSEL & RCC_SYSCLKSEL_CLKSW);
;;;842    
;;;843        /* Get the HCLK configuration ----------------------------------------------*/
;;;844        RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->HCLKDIV & RCC_HCLKDIV_AHBCKDIV);
;;;845    
;;;846        /* Get the APB1 configuration ----------------------------------------------*/
;;;847        RCC_ClkInitStruct->APBCLKDivider = (uint32_t)(RCC->PCLKDIV & RCC_PCLKDIV_APBCKDIV);
;;;848        return;
;;;849    }
;;;850    
;;;851    
;;;852    
;;;853    /**
;;;854     * @}
;;;855     */ /* End of group RCC_Exported_Functions_Group2 */
;;;856    
;;;857    /**
;;;858     * @}
;;;859     */ /* End of group RCC_Exported_Functions*/
;;;860    
;;;861    #endif  /* HAL_RCC_MODULE_ENABLED */
;;;862    
;;;863    /**
;;;864     * @}
;;;865     */ /* End of group RCC*/
;;;866    
;;;867    /**
;;;868     * @}
;;;869     */ /* group CS32L015_HAL_Driver */
;;;870    
        0x00000608:    b510        ..      PUSH     {r4,lr}
        0x0000060a:    4813        .H      LDR      r0,[pc,#76] ; [0x658] = 0x40020028
        0x0000060c:    1f01        ..      SUBS     r1,r0,#4
        0x0000060e:    680a        .h      LDR      r2,[r1,#0]
        0x00000610:    210f        .!      MOVS     r1,#0xf
        0x00000612:    4011        .@      ANDS     r1,r1,r2
        0x00000614:    2904        .)      CMP      r1,#4
        0x00000616:    d00c        ..      BEQ      0x632 ; HAL_RCC_GetSysClockFreq + 42
        0x00000618:    2902        .)      CMP      r1,#2
        0x0000061a:    d00d        ..      BEQ      0x638 ; HAL_RCC_GetSysClockFreq + 48
        0x0000061c:    2901        .)      CMP      r1,#1
        0x0000061e:    d10d        ..      BNE      0x63c ; HAL_RCC_GetSysClockFreq + 52
        0x00000620:    6803        .h      LDR      r3,[r0,#0]
        0x00000622:    490f        .I      LDR      r1,[pc,#60] ; [0x660] = 0xfff
        0x00000624:    400b        .@      ANDS     r3,r3,r1
        0x00000626:    4a0f        .J      LDR      r2,[pc,#60] ; [0x664] = 0x180000a0
        0x00000628:    8814        ..      LDRH     r4,[r2,#0]
        0x0000062a:    42a3        .B      CMP      r3,r4
        0x0000062c:    d109        ..      BNE      0x642 ; HAL_RCC_GetSysClockFreq + 58
        0x0000062e:    480e        .H      LDR      r0,[pc,#56] ; [0x668] = 0x16e3600
        0x00000630:    bd10        ..      POP      {r4,pc}
        0x00000632:    204b        K       MOVS     r0,#0x4b
        0x00000634:    0240        @.      LSLS     r0,r0,#9
        0x00000636:    bd10        ..      POP      {r4,pc}
        0x00000638:    4808        .H      LDR      r0,[pc,#32] ; [0x65c] = 0x7a1200
        0x0000063a:    bd10        ..      POP      {r4,pc}
        0x0000063c:    2001        .       MOVS     r0,#1
        0x0000063e:    03c0        ..      LSLS     r0,r0,#15
        0x00000640:    bd10        ..      POP      {r4,pc}
        0x00000642:    6803        .h      LDR      r3,[r0,#0]
        0x00000644:    400b        .@      ANDS     r3,r3,r1
        0x00000646:    8891        ..      LDRH     r1,[r2,#4]
        0x00000648:    428b        .B      CMP      r3,r1
        0x0000064a:    d102        ..      BNE      0x652 ; HAL_RCC_GetSysClockFreq + 74
        0x0000064c:    20e1        .       MOVS     r0,#0xe1
        0x0000064e:    0400        ..      LSLS     r0,r0,#16
        0x00000650:    bd10        ..      POP      {r4,pc}
        0x00000652:    6800        .h      LDR      r0,[r0,#0]
        0x00000654:    4805        .H      LDR      r0,[pc,#20] ; [0x66c] = 0x3d0900
        0x00000656:    bd10        ..      POP      {r4,pc}
    $d.11
    __arm_cp.4_0
        0x00000658:    40020028    (..@    DCD    1073872936
    __arm_cp.4_1
        0x0000065c:    007a1200    ..z.    DCD    8000000
    __arm_cp.4_2
        0x00000660:    00000fff    ....    DCD    4095
    __arm_cp.4_3
        0x00000664:    180000a0    ....    DCD    402653344
    __arm_cp.4_4
        0x00000668:    016e3600    .6n.    DCD    24000000
    __arm_cp.4_5
        0x0000066c:    003d0900    ..=.    DCD    4000000
    $t.2
    HAL_RCC_OscConfig
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_rcc.c (8537)
        0x00000670:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00000672:    b081        ..      SUB      sp,sp,#4
        0x00000674:    9000        ..      STR      r0,[sp,#0]
        0x00000676:    7800        .x      LDRB     r0,[r0,#0]
        0x00000678:    07c0        ..      LSLS     r0,r0,#31
        0x0000067a:    4fc7        .O      LDR      r7,[pc,#796] ; [0x998] = 0x40020060
        0x0000067c:    4cc7        .L      LDR      r4,[pc,#796] ; [0x99c] = 0x55aa6698
        0x0000067e:    d071        q.      BEQ      0x764 ; HAL_RCC_OscConfig + 244
        0x00000680:    4638        8F      MOV      r0,r7
        0x00000682:    383c        <8      SUBS     r0,r0,#0x3c
        0x00000684:    6800        .h      LDR      r0,[r0,#0]
        0x00000686:    210f        .!      MOVS     r1,#0xf
        0x00000688:    4001        .@      ANDS     r1,r1,r0
        0x0000068a:    2901        .)      CMP      r1,#1
        0x0000068c:    d11c        ..      BNE      0x6c8 ; HAL_RCC_OscConfig + 88
        0x0000068e:    2501        .%      MOVS     r5,#1
        0x00000690:    4638        8F      MOV      r0,r7
        0x00000692:    3838        88      SUBS     r0,r0,#0x38
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_rcc.c (9569)
        0x00000694:    6801        .h      LDR      r1,[r0,#0]
        0x00000696:    04c9        ..      LSLS     r1,r1,#19
        0x00000698:    9b00        ..      LDR      r3,[sp,#0]
        0x0000069a:    d403        ..      BMI      0x6a4 ; HAL_RCC_OscConfig + 52
        0x0000069c:    6859        Yh      LDR      r1,[r3,#4]
        0x0000069e:    2901        .)      CMP      r1,#1
        0x000006a0:    d000        ..      BEQ      0x6a4 ; HAL_RCC_OscConfig + 52
        0x000006a2:    e175        u.      B        0x990 ; HAL_RCC_OscConfig + 800
        0x000006a4:    1c61        a.      ADDS     r1,r4,#1
        0x000006a6:    6039        9`      STR      r1,[r7,#0]
        0x000006a8:    2107        .!      MOVS     r1,#7
        0x000006aa:    024a        J.      LSLS     r2,r1,#9
        0x000006ac:    6899        .h      LDR      r1,[r3,#8]
        0x000006ae:    460b        .F      MOV      r3,r1
        0x000006b0:    4013        .@      ANDS     r3,r3,r2
        0x000006b2:    d007        ..      BEQ      0x6c4 ; HAL_RCC_OscConfig + 84
        0x000006b4:    4293        .B      CMP      r3,r2
        0x000006b6:    d005        ..      BEQ      0x6c4 ; HAL_RCC_OscConfig + 84
        0x000006b8:    032a        *.      LSLS     r2,r5,#12
        0x000006ba:    1e52        R.      SUBS     r2,r2,#1
        0x000006bc:    4011        .@      ANDS     r1,r1,r2
        0x000006be:    4ab8        .J      LDR      r2,[pc,#736] ; [0x9a0] = 0x5a690000
        0x000006c0:    4311        .C      ORRS     r1,r1,r2
        0x000006c2:    6001        .`      STR      r1,[r0,#0]
        0x000006c4:    603c        <`      STR      r4,[r7,#0]
        0x000006c6:    e04d        M.      B        0x764 ; HAL_RCC_OscConfig + 244
        0x000006c8:    9b00        ..      LDR      r3,[sp,#0]
        0x000006ca:    6859        Yh      LDR      r1,[r3,#4]
        0x000006cc:    1c60        `.      ADDS     r0,r4,#1
        0x000006ce:    6038        8`      STR      r0,[r7,#0]
        0x000006d0:    2900        .)      CMP      r1,#0
        0x000006d2:    d02c        ,.      BEQ      0x72e ; HAL_RCC_OscConfig + 190
        0x000006d4:    4625        %F      MOV      r5,r4
        0x000006d6:    2107        .!      MOVS     r1,#7
        0x000006d8:    024a        J.      LSLS     r2,r1,#9
        0x000006da:    6899        .h      LDR      r1,[r3,#8]
        0x000006dc:    460b        .F      MOV      r3,r1
        0x000006de:    4013        .@      ANDS     r3,r3,r2
        0x000006e0:    2401        .$      MOVS     r4,#1
        0x000006e2:    0326        &.      LSLS     r6,r4,#12
        0x000006e4:    2b00        .+      CMP      r3,#0
        0x000006e6:    d008        ..      BEQ      0x6fa ; HAL_RCC_OscConfig + 138
        0x000006e8:    4293        .B      CMP      r3,r2
        0x000006ea:    d006        ..      BEQ      0x6fa ; HAL_RCC_OscConfig + 138
        0x000006ec:    1e72        r.      SUBS     r2,r6,#1
        0x000006ee:    4011        .@      ANDS     r1,r1,r2
        0x000006f0:    4aab        .J      LDR      r2,[pc,#684] ; [0x9a0] = 0x5a690000
        0x000006f2:    4311        .C      ORRS     r1,r1,r2
        0x000006f4:    463a        :F      MOV      r2,r7
        0x000006f6:    3a38        8:      SUBS     r2,r2,#0x38
        0x000006f8:    6011        .`      STR      r1,[r2,#0]
        0x000006fa:    462c        ,F      MOV      r4,r5
        0x000006fc:    603d        =`      STR      r5,[r7,#0]
        0x000006fe:    6038        8`      STR      r0,[r7,#0]
        0x00000700:    48a7        .H      LDR      r0,[pc,#668] ; [0x9a0] = 0x5a690000
        0x00000702:    1c40        @.      ADDS     r0,r0,#1
        0x00000704:    4639        9F      MOV      r1,r7
        0x00000706:    3940        @9      SUBS     r1,r1,#0x40
        0x00000708:    680a        .h      LDR      r2,[r1,#0]
        0x0000070a:    4302        .C      ORRS     r2,r2,r0
        0x0000070c:    600a        .`      STR      r2,[r1,#0]
        0x0000070e:    603d        =`      STR      r5,[r7,#0]
        0x00000710:    f7fffe6e    ..n.    BL       HAL_GetTick ; 0x3f0
        0x00000714:    4605        .F      MOV      r5,r0
        0x00000716:    4638        8F      MOV      r0,r7
        0x00000718:    3838        88      SUBS     r0,r0,#0x38
        0x0000071a:    6800        .h      LDR      r0,[r0,#0]
        0x0000071c:    4230        0B      TST      r0,r6
        0x0000071e:    d121        !.      BNE      0x764 ; HAL_RCC_OscConfig + 244
        0x00000720:    f7fffe66    ..f.    BL       HAL_GetTick ; 0x3f0
        0x00000724:    1b40        @.      SUBS     r0,r0,r5
        0x00000726:    2802        .(      CMP      r0,#2
        0x00000728:    d9f5        ..      BLS      0x716 ; HAL_RCC_OscConfig + 166
        0x0000072a:    2503        .%      MOVS     r5,#3
        0x0000072c:    e130        0.      B        0x990 ; HAL_RCC_OscConfig + 800
        0x0000072e:    489d        .H      LDR      r0,[pc,#628] ; [0x9a4] = 0xa596feff
        0x00000730:    30ff        .0      ADDS     r0,r0,#0xff
        0x00000732:    4639        9F      MOV      r1,r7
        0x00000734:    3940        @9      SUBS     r1,r1,#0x40
        0x00000736:    680a        .h      LDR      r2,[r1,#0]
        0x00000738:    4002        .@      ANDS     r2,r2,r0
        0x0000073a:    4899        .H      LDR      r0,[pc,#612] ; [0x9a0] = 0x5a690000
        0x0000073c:    4302        .C      ORRS     r2,r2,r0
        0x0000073e:    600a        .`      STR      r2,[r1,#0]
        0x00000740:    603c        <`      STR      r4,[r7,#0]
        0x00000742:    2001        .       MOVS     r0,#1
        0x00000744:    0306        ..      LSLS     r6,r0,#12
        0x00000746:    f7fffe53    ..S.    BL       HAL_GetTick ; 0x3f0
        0x0000074a:    4605        .F      MOV      r5,r0
        0x0000074c:    4638        8F      MOV      r0,r7
        0x0000074e:    3838        88      SUBS     r0,r0,#0x38
        0x00000750:    6800        .h      LDR      r0,[r0,#0]
        0x00000752:    4230        0B      TST      r0,r6
        0x00000754:    d006        ..      BEQ      0x764 ; HAL_RCC_OscConfig + 244
        0x00000756:    f7fffe4b    ..K.    BL       HAL_GetTick ; 0x3f0
        0x0000075a:    1b40        @.      SUBS     r0,r0,r5
        0x0000075c:    2802        .(      CMP      r0,#2
        0x0000075e:    d9f5        ..      BLS      0x74c ; HAL_RCC_OscConfig + 220
        0x00000760:    2503        .%      MOVS     r5,#3
        0x00000762:    e115        ..      B        0x990 ; HAL_RCC_OscConfig + 800
        0x00000764:    9800        ..      LDR      r0,[sp,#0]
        0x00000766:    7800        .x      LDRB     r0,[r0,#0]
        0x00000768:    0700        ..      LSLS     r0,r0,#28
        0x0000076a:    d554        T.      BPL      0x816 ; HAL_RCC_OscConfig + 422
        0x0000076c:    9b00        ..      LDR      r3,[sp,#0]
        0x0000076e:    6959        Yi      LDR      r1,[r3,#0x14]
        0x00000770:    1c60        `.      ADDS     r0,r4,#1
        0x00000772:    6038        8`      STR      r0,[r7,#0]
        0x00000774:    2900        .)      CMP      r1,#0
        0x00000776:    d02f        /.      BEQ      0x7d8 ; HAL_RCC_OscConfig + 360
        0x00000778:    4626        &F      MOV      r6,r4
        0x0000077a:    463c        <F      MOV      r4,r7
        0x0000077c:    3f30        0?      SUBS     r7,r7,#0x30
        0x0000077e:    683a        :h      LDR      r2,[r7,#0]
        0x00000780:    4989        .I      LDR      r1,[pc,#548] ; [0x9a8] = 0x1ff
        0x00000782:    400a        .@      ANDS     r2,r2,r1
        0x00000784:    4619        .F      MOV      r1,r3
        0x00000786:    699b        .i      LDR      r3,[r3,#0x18]
        0x00000788:    4313        .C      ORRS     r3,r3,r2
        0x0000078a:    4a85        .J      LDR      r2,[pc,#532] ; [0x9a0] = 0x5a690000
        0x0000078c:    4313        .C      ORRS     r3,r3,r2
        0x0000078e:    603b        ;`      STR      r3,[r7,#0]
        0x00000790:    6026        &`      STR      r6,[r4,#0]
        0x00000792:    6020         `      STR      r0,[r4,#0]
        0x00000794:    2503        .%      MOVS     r5,#3
        0x00000796:    02aa        ..      LSLS     r2,r5,#10
        0x00000798:    683b        ;h      LDR      r3,[r7,#0]
        0x0000079a:    4013        .@      ANDS     r3,r3,r2
        0x0000079c:    69ca        .i      LDR      r2,[r1,#0x1c]
        0x0000079e:    4982        .I      LDR      r1,[pc,#520] ; [0x9a8] = 0x1ff
        0x000007a0:    400a        .@      ANDS     r2,r2,r1
        0x000007a2:    1899        ..      ADDS     r1,r3,r2
        0x000007a4:    4a7e        ~J      LDR      r2,[pc,#504] ; [0x9a0] = 0x5a690000
        0x000007a6:    4311        .C      ORRS     r1,r1,r2
        0x000007a8:    6039        9`      STR      r1,[r7,#0]
        0x000007aa:    6026        &`      STR      r6,[r4,#0]
        0x000007ac:    6020         `      STR      r0,[r4,#0]
        0x000007ae:    1d10        ..      ADDS     r0,r2,#4
        0x000007b0:    4621        !F      MOV      r1,r4
        0x000007b2:    3940        @9      SUBS     r1,r1,#0x40
        0x000007b4:    680a        .h      LDR      r2,[r1,#0]
        0x000007b6:    4302        .C      ORRS     r2,r2,r0
        0x000007b8:    600a        .`      STR      r2,[r1,#0]
        0x000007ba:    6026        &`      STR      r6,[r4,#0]
        0x000007bc:    2001        .       MOVS     r0,#1
        0x000007be:    0304        ..      LSLS     r4,r0,#12
        0x000007c0:    f7fffe16    ....    BL       HAL_GetTick ; 0x3f0
        0x000007c4:    4606        .F      MOV      r6,r0
        0x000007c6:    6838        8h      LDR      r0,[r7,#0]
        0x000007c8:    4220         B      TST      r0,r4
        0x000007ca:    d120         .      BNE      0x80e ; HAL_RCC_OscConfig + 414
        0x000007cc:    f7fffe10    ....    BL       HAL_GetTick ; 0x3f0
        0x000007d0:    1b80        ..      SUBS     r0,r0,r6
        0x000007d2:    2802        .(      CMP      r0,#2
        0x000007d4:    d9f7        ..      BLS      0x7c6 ; HAL_RCC_OscConfig + 342
        0x000007d6:    e0db        ..      B        0x990 ; HAL_RCC_OscConfig + 800
        0x000007d8:    4872        rH      LDR      r0,[pc,#456] ; [0x9a4] = 0xa596feff
        0x000007da:    30fc        .0      ADDS     r0,r0,#0xfc
        0x000007dc:    4639        9F      MOV      r1,r7
        0x000007de:    3940        @9      SUBS     r1,r1,#0x40
        0x000007e0:    680a        .h      LDR      r2,[r1,#0]
        0x000007e2:    4002        .@      ANDS     r2,r2,r0
        0x000007e4:    486e        nH      LDR      r0,[pc,#440] ; [0x9a0] = 0x5a690000
        0x000007e6:    4302        .C      ORRS     r2,r2,r0
        0x000007e8:    600a        .`      STR      r2,[r1,#0]
        0x000007ea:    603c        <`      STR      r4,[r7,#0]
        0x000007ec:    2001        .       MOVS     r0,#1
        0x000007ee:    0306        ..      LSLS     r6,r0,#12
        0x000007f0:    f7fffdfe    ....    BL       HAL_GetTick ; 0x3f0
        0x000007f4:    4605        .F      MOV      r5,r0
        0x000007f6:    4638        8F      MOV      r0,r7
        0x000007f8:    3830        08      SUBS     r0,r0,#0x30
        0x000007fa:    6800        .h      LDR      r0,[r0,#0]
        0x000007fc:    4230        0B      TST      r0,r6
        0x000007fe:    d00a        ..      BEQ      0x816 ; HAL_RCC_OscConfig + 422
        0x00000800:    f7fffdf6    ....    BL       HAL_GetTick ; 0x3f0
        0x00000804:    1b40        @.      SUBS     r0,r0,r5
        0x00000806:    2802        .(      CMP      r0,#2
        0x00000808:    d9f5        ..      BLS      0x7f6 ; HAL_RCC_OscConfig + 390
        0x0000080a:    2503        .%      MOVS     r5,#3
        0x0000080c:    e0c0        ..      B        0x990 ; HAL_RCC_OscConfig + 800
        0x0000080e:    f000f9c1    ....    BL       RCC_Delay ; 0xb94
        0x00000812:    4f61        aO      LDR      r7,[pc,#388] ; [0x998] = 0x40020060
        0x00000814:    4c61        aL      LDR      r4,[pc,#388] ; [0x99c] = 0x55aa6698
        0x00000816:    9800        ..      LDR      r0,[sp,#0]
        0x00000818:    7800        .x      LDRB     r0,[r0,#0]
        0x0000081a:    0780        ..      LSLS     r0,r0,#30
        0x0000081c:    d55f        _.      BPL      0x8de ; HAL_RCC_OscConfig + 622
        0x0000081e:    4638        8F      MOV      r0,r7
        0x00000820:    383c        <8      SUBS     r0,r0,#0x3c
        0x00000822:    6800        .h      LDR      r0,[r0,#0]
        0x00000824:    210f        .!      MOVS     r1,#0xf
        0x00000826:    4001        .@      ANDS     r1,r1,r0
        0x00000828:    2902        .)      CMP      r1,#2
        0x0000082a:    d10a        ..      BNE      0x842 ; HAL_RCC_OscConfig + 466
        0x0000082c:    4638        8F      MOV      r0,r7
        0x0000082e:    3834        48      SUBS     r0,r0,#0x34
        0x00000830:    6800        .h      LDR      r0,[r0,#0]
        0x00000832:    0640        @.      LSLS     r0,r0,#25
        0x00000834:    d553        S.      BPL      0x8de ; HAL_RCC_OscConfig + 622
        0x00000836:    9800        ..      LDR      r0,[sp,#0]
        0x00000838:    6900        .i      LDR      r0,[r0,#0x10]
        0x0000083a:    2800        .(      CMP      r0,#0
        0x0000083c:    d14f        O.      BNE      0x8de ; HAL_RCC_OscConfig + 622
        0x0000083e:    2501        .%      MOVS     r5,#1
        0x00000840:    e0a6        ..      B        0x990 ; HAL_RCC_OscConfig + 800
        0x00000842:    1c60        `.      ADDS     r0,r4,#1
        0x00000844:    6038        8`      STR      r0,[r7,#0]
        0x00000846:    9800        ..      LDR      r0,[sp,#0]
        0x00000848:    6902        .i      LDR      r2,[r0,#0x10]
        0x0000084a:    2a00        .*      CMP      r2,#0
        0x0000084c:    d008        ..      BEQ      0x860 ; HAL_RCC_OscConfig + 496
        0x0000084e:    2a02        .*      CMP      r2,#2
        0x00000850:    4d53        SM      LDR      r5,[pc,#332] ; [0x9a0] = 0x5a690000
        0x00000852:    d11e        ..      BNE      0x892 ; HAL_RCC_OscConfig + 546
        0x00000854:    1ca9        ..      ADDS     r1,r5,#2
        0x00000856:    4638        8F      MOV      r0,r7
        0x00000858:    3840        @8      SUBS     r0,r0,#0x40
        0x0000085a:    6800        .h      LDR      r0,[r0,#0]
        0x0000085c:    4308        .C      ORRS     r0,r0,r1
        0x0000085e:    e02b        +.      B        0x8b8 ; HAL_RCC_OscConfig + 584
        0x00000860:    4850        PH      LDR      r0,[pc,#320] ; [0x9a4] = 0xa596feff
        0x00000862:    30fe        .0      ADDS     r0,r0,#0xfe
        0x00000864:    4639        9F      MOV      r1,r7
        0x00000866:    3940        @9      SUBS     r1,r1,#0x40
        0x00000868:    680a        .h      LDR      r2,[r1,#0]
        0x0000086a:    4002        .@      ANDS     r2,r2,r0
        0x0000086c:    484c        LH      LDR      r0,[pc,#304] ; [0x9a0] = 0x5a690000
        0x0000086e:    4302        .C      ORRS     r2,r2,r0
        0x00000870:    600a        .`      STR      r2,[r1,#0]
        0x00000872:    603c        <`      STR      r4,[r7,#0]
        0x00000874:    f7fffdbc    ....    BL       HAL_GetTick ; 0x3f0
        0x00000878:    4606        .F      MOV      r6,r0
        0x0000087a:    4638        8F      MOV      r0,r7
        0x0000087c:    3834        48      SUBS     r0,r0,#0x34
        0x0000087e:    6800        .h      LDR      r0,[r0,#0]
        0x00000880:    0640        @.      LSLS     r0,r0,#25
        0x00000882:    d52c        ,.      BPL      0x8de ; HAL_RCC_OscConfig + 622
        0x00000884:    f7fffdb4    ....    BL       HAL_GetTick ; 0x3f0
        0x00000888:    1b80        ..      SUBS     r0,r0,r6
        0x0000088a:    2503        .%      MOVS     r5,#3
        0x0000088c:    2864        d(      CMP      r0,#0x64
        0x0000088e:    d9f4        ..      BLS      0x87a ; HAL_RCC_OscConfig + 522
        0x00000890:    e07e        ~.      B        0x990 ; HAL_RCC_OscConfig + 800
        0x00000892:    4639        9F      MOV      r1,r7
        0x00000894:    3940        @9      SUBS     r1,r1,#0x40
        0x00000896:    6808        .h      LDR      r0,[r1,#0]
        0x00000898:    2a20         *      CMP      r2,#0x20
        0x0000089a:    d103        ..      BNE      0x8a4 ; HAL_RCC_OscConfig + 564
        0x0000089c:    4629        )F      MOV      r1,r5
        0x0000089e:    3120         1      ADDS     r1,r1,#0x20
        0x000008a0:    4308        .C      ORRS     r0,r0,r1
        0x000008a2:    e009        ..      B        0x8b8 ; HAL_RCC_OscConfig + 584
        0x000008a4:    4a3f        ?J      LDR      r2,[pc,#252] ; [0x9a4] = 0xa596feff
        0x000008a6:    4613        .F      MOV      r3,r2
        0x000008a8:    33fe        .3      ADDS     r3,r3,#0xfe
        0x000008aa:    4018        .@      ANDS     r0,r0,r3
        0x000008ac:    4328        (C      ORRS     r0,r0,r5
        0x000008ae:    6008        .`      STR      r0,[r1,#0]
        0x000008b0:    32e0        .2      ADDS     r2,r2,#0xe0
        0x000008b2:    6808        .h      LDR      r0,[r1,#0]
        0x000008b4:    4010        .@      ANDS     r0,r0,r2
        0x000008b6:    4328        (C      ORRS     r0,r0,r5
        0x000008b8:    4639        9F      MOV      r1,r7
        0x000008ba:    3940        @9      SUBS     r1,r1,#0x40
        0x000008bc:    6008        .`      STR      r0,[r1,#0]
        0x000008be:    603c        <`      STR      r4,[r7,#0]
        0x000008c0:    f7fffd96    ....    BL       HAL_GetTick ; 0x3f0
        0x000008c4:    4605        .F      MOV      r5,r0
        0x000008c6:    4638        8F      MOV      r0,r7
        0x000008c8:    3834        48      SUBS     r0,r0,#0x34
        0x000008ca:    6800        .h      LDR      r0,[r0,#0]
        0x000008cc:    0640        @.      LSLS     r0,r0,#25
        0x000008ce:    d406        ..      BMI      0x8de ; HAL_RCC_OscConfig + 622
        0x000008d0:    f7fffd8e    ....    BL       HAL_GetTick ; 0x3f0
        0x000008d4:    1b40        @.      SUBS     r0,r0,r5
        0x000008d6:    2864        d(      CMP      r0,#0x64
        0x000008d8:    d9f5        ..      BLS      0x8c6 ; HAL_RCC_OscConfig + 598
        0x000008da:    2503        .%      MOVS     r5,#3
        0x000008dc:    e058        X.      B        0x990 ; HAL_RCC_OscConfig + 800
        0x000008de:    9900        ..      LDR      r1,[sp,#0]
        0x000008e0:    7808        .x      LDRB     r0,[r1,#0]
        0x000008e2:    2500        .%      MOVS     r5,#0
        0x000008e4:    0740        @.      LSLS     r0,r0,#29
        0x000008e6:    d553        S.      BPL      0x990 ; HAL_RCC_OscConfig + 800
        0x000008e8:    1c60        `.      ADDS     r0,r4,#1
        0x000008ea:    6038        8`      STR      r0,[r7,#0]
        0x000008ec:    6a09        .j      LDR      r1,[r1,#0x20]
        0x000008ee:    2900        .)      CMP      r1,#0
        0x000008f0:    d009        ..      BEQ      0x906 ; HAL_RCC_OscConfig + 662
        0x000008f2:    2001        .       MOVS     r0,#1
        0x000008f4:    0200        ..      LSLS     r0,r0,#8
        0x000008f6:    4281        .B      CMP      r1,r0
        0x000008f8:    d126        &.      BNE      0x948 ; HAL_RCC_OscConfig + 728
        0x000008fa:    4638        8F      MOV      r0,r7
        0x000008fc:    382c        ,8      SUBS     r0,r0,#0x2c
        0x000008fe:    6801        .h      LDR      r1,[r0,#0]
        0x00000900:    482d        -H      LDR      r0,[pc,#180] ; [0x9b8] = 0x5a690100
        0x00000902:    4308        .C      ORRS     r0,r0,r1
        0x00000904:    e033        3.      B        0x96e ; HAL_RCC_OscConfig + 766
        0x00000906:    463e        >F      MOV      r6,r7
        0x00000908:    3e2c        ,>      SUBS     r6,r6,#0x2c
        0x0000090a:    6830        0h      LDR      r0,[r6,#0]
        0x0000090c:    4927        'I      LDR      r1,[pc,#156] ; [0x9ac] = 0xa596fbff
        0x0000090e:    4001        .@      ANDS     r1,r1,r0
        0x00000910:    4823        #H      LDR      r0,[pc,#140] ; [0x9a0] = 0x5a690000
        0x00000912:    4602        .F      MOV      r2,r0
        0x00000914:    4301        .C      ORRS     r1,r1,r0
        0x00000916:    6031        1`      STR      r1,[r6,#0]
        0x00000918:    6830        0h      LDR      r0,[r6,#0]
        0x0000091a:    4922        "I      LDR      r1,[pc,#136] ; [0x9a4] = 0xa596feff
        0x0000091c:    4001        .@      ANDS     r1,r1,r0
        0x0000091e:    4311        .C      ORRS     r1,r1,r2
        0x00000920:    6031        1`      STR      r1,[r6,#0]
        0x00000922:    6830        0h      LDR      r0,[r6,#0]
        0x00000924:    4922        "I      LDR      r1,[pc,#136] ; [0x9b0] = 0x5a690400
        0x00000926:    4301        .C      ORRS     r1,r1,r0
        0x00000928:    6031        1`      STR      r1,[r6,#0]
        0x0000092a:    603c        <`      STR      r4,[r7,#0]
        0x0000092c:    4f21        !O      LDR      r7,[pc,#132] ; [0x9b4] = 0x1388
        0x0000092e:    f7fffd5f    .._.    BL       HAL_GetTick ; 0x3f0
        0x00000932:    4604        .F      MOV      r4,r0
        0x00000934:    6830        0h      LDR      r0,[r6,#0]
        0x00000936:    0640        @.      LSLS     r0,r0,#25
        0x00000938:    d52a        *.      BPL      0x990 ; HAL_RCC_OscConfig + 800
        0x0000093a:    f7fffd59    ..Y.    BL       HAL_GetTick ; 0x3f0
        0x0000093e:    1b00        ..      SUBS     r0,r0,r4
        0x00000940:    42b8        .B      CMP      r0,r7
        0x00000942:    d9f7        ..      BLS      0x934 ; HAL_RCC_OscConfig + 708
        0x00000944:    2503        .%      MOVS     r5,#3
        0x00000946:    e023        #.      B        0x990 ; HAL_RCC_OscConfig + 800
        0x00000948:    4638        8F      MOV      r0,r7
        0x0000094a:    382c        ,8      SUBS     r0,r0,#0x2c
        0x0000094c:    6802        .h      LDR      r2,[r0,#0]
        0x0000094e:    4b15        .K      LDR      r3,[pc,#84] ; [0x9a4] = 0xa596feff
        0x00000950:    4013        .@      ANDS     r3,r3,r2
        0x00000952:    4e13        .N      LDR      r6,[pc,#76] ; [0x9a0] = 0x5a690000
        0x00000954:    4333        3C      ORRS     r3,r3,r6
        0x00000956:    6003        .`      STR      r3,[r0,#0]
        0x00000958:    6800        .h      LDR      r0,[r0,#0]
        0x0000095a:    4a13        .J      LDR      r2,[pc,#76] ; [0x9a8] = 0x1ff
        0x0000095c:    1c52        R.      ADDS     r2,r2,#1
        0x0000095e:    4291        .B      CMP      r1,r2
        0x00000960:    d102        ..      BNE      0x968 ; HAL_RCC_OscConfig + 760
        0x00000962:    4917        .I      LDR      r1,[pc,#92] ; [0x9c0] = 0x5a690200
        0x00000964:    4308        .C      ORRS     r0,r0,r1
        0x00000966:    e002        ..      B        0x96e ; HAL_RCC_OscConfig + 766
        0x00000968:    4914        .I      LDR      r1,[pc,#80] ; [0x9bc] = 0xa596fdff
        0x0000096a:    4008        .@      ANDS     r0,r0,r1
        0x0000096c:    4330        0C      ORRS     r0,r0,r6
        0x0000096e:    463e        >F      MOV      r6,r7
        0x00000970:    3e2c        ,>      SUBS     r6,r6,#0x2c
        0x00000972:    6030        0`      STR      r0,[r6,#0]
        0x00000974:    603c        <`      STR      r4,[r7,#0]
        0x00000976:    4f0f        .O      LDR      r7,[pc,#60] ; [0x9b4] = 0x1388
        0x00000978:    f7fffd3a    ..:.    BL       HAL_GetTick ; 0x3f0
        0x0000097c:    4604        .F      MOV      r4,r0
        0x0000097e:    6830        0h      LDR      r0,[r6,#0]
        0x00000980:    0640        @.      LSLS     r0,r0,#25
        0x00000982:    d405        ..      BMI      0x990 ; HAL_RCC_OscConfig + 800
        0x00000984:    f7fffd34    ..4.    BL       HAL_GetTick ; 0x3f0
        0x00000988:    1b00        ..      SUBS     r0,r0,r4
        0x0000098a:    42b8        .B      CMP      r0,r7
        0x0000098c:    d9f7        ..      BLS      0x97e ; HAL_RCC_OscConfig + 782
        0x0000098e:    2503        .%      MOVS     r5,#3
        0x00000990:    4628        (F      MOV      r0,r5
        0x00000992:    b001        ..      ADD      sp,sp,#4
        0x00000994:    bdf0        ..      POP      {r4-r7,pc}
        0x00000996:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.1_0
        0x00000998:    40020060    `..@    DCD    1073872992
    __arm_cp.1_1
        0x0000099c:    55aa6698    .f.U    DCD    1437230744
    __arm_cp.1_2
        0x000009a0:    5a690000    ..iZ    DCD    1516830720
    __arm_cp.1_3
        0x000009a4:    a596feff    ....    DCD    2778136319
    __arm_cp.1_4
        0x000009a8:    000001ff    ....    DCD    511
    __arm_cp.1_5
        0x000009ac:    a596fbff    ....    DCD    2778135551
    __arm_cp.1_6
        0x000009b0:    5a690400    ..iZ    DCD    1516831744
    __arm_cp.1_7
        0x000009b4:    00001388    ....    DCD    5000
    __arm_cp.1_8
        0x000009b8:    5a690100    ..iZ    DCD    1516830976
    __arm_cp.1_9
        0x000009bc:    a596fdff    ....    DCD    2778136063
    __arm_cp.1_10
        0x000009c0:    5a690200    ..iZ    DCD    1516831232
    $t.12
    HAL_SYSTICK_Config
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_cortex.c
;;;265        /* Check the parameters */
        0x000009c4:    b580        ..      PUSH     {r7,lr}
        0x000009c6:    f000f8fb    ....    BL       SysTick_Config ; 0xbc0
        0x000009ca:    bd80        ..      POP      {r7,pc}
    HAL_UART_Init
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_uart.c
;;;1265   {
        0x000009cc:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x000009ce:    2800        .(      CMP      r0,#0
        0x000009d0:    d015        ..      BEQ      0x9fe ; HAL_UART_Init + 50
        0x000009d2:    4604        .F      MOV      r4,r0
        0x000009d4:    4605        .F      MOV      r5,r0
        0x000009d6:    352c        ,5      ADDS     r5,r5,#0x2c
        0x000009d8:    7868        hx      LDRB     r0,[r5,#1]
        0x000009da:    2800        .(      CMP      r0,#0
        0x000009dc:    d104        ..      BNE      0x9e8 ; HAL_UART_Init + 28
        0x000009de:    2000        .       MOVS     r0,#0
        0x000009e0:    7028        (p      STRB     r0,[r5,#0]
        0x000009e2:    4620         F      MOV      r0,r4
        0x000009e4:    f000f80e    ....    BL       HAL_UART_MspInit ; 0xa04
        0x000009e8:    2024        $       MOVS     r0,#0x24
        0x000009ea:    7068        hp      STRB     r0,[r5,#1]
        0x000009ec:    4620         F      MOV      r0,r4
        0x000009ee:    f000f941    ..A.    BL       UART_SetConfig ; 0xc74
        0x000009f2:    2000        .       MOVS     r0,#0
        0x000009f4:    6320         c      STR      r0,[r4,#0x30]
        0x000009f6:    2120         !      MOVS     r1,#0x20
        0x000009f8:    7069        ip      STRB     r1,[r5,#1]
        0x000009fa:    70a9        .p      STRB     r1,[r5,#2]
        0x000009fc:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x000009fe:    2001        .       MOVS     r0,#1
        0x00000a00:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x00000a02:    0000        ..      MOVS     r0,r0
    HAL_UART_MspInit
;;; ../Src\cs32l015_hal_msp.c (2049)
        0x00000a04:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00000a06:    b08f        ..      SUB      sp,sp,#0x3c
        0x00000a08:    4604        .F      MOV      r4,r0
        0x00000a0a:    a802        ..      ADD      r0,sp,#8
        0x00000a0c:    2134        4!      MOVS     r1,#0x34
        0x00000a0e:    f7fffb76    ..v.    BL       __aeabi_memclr ; 0xfe
        0x00000a12:    6820         h      LDR      r0,[r4,#0]
        0x00000a14:    491d        .I      LDR      r1,[pc,#116] ; [0xa8c] = 0x40000400
        0x00000a16:    4288        .B      CMP      r0,r1
        0x00000a18:    d001        ..      BEQ      0xa1e ; HAL_UART_MspInit + 26
        0x00000a1a:    b00f        ..      ADD      sp,sp,#0x3c
        0x00000a1c:    bdf0        ..      POP      {r4-r7,pc}
        0x00000a1e:    481c        .H      LDR      r0,[pc,#112] ; [0xa90] = 0x40020008
        0x00000a20:    6841        Ah      LDR      r1,[r0,#4]
        0x00000a22:    2602        .&      MOVS     r6,#2
        0x00000a24:    4331        1C      ORRS     r1,r1,r6
        0x00000a26:    6041        A`      STR      r1,[r0,#4]
        0x00000a28:    6841        Ah      LDR      r1,[r0,#4]
        0x00000a2a:    4031        1@      ANDS     r1,r1,r6
        0x00000a2c:    9101        ..      STR      r1,[sp,#4]
        0x00000a2e:    9901        ..      LDR      r1,[sp,#4]
        0x00000a30:    6801        .h      LDR      r1,[r0,#0]
        0x00000a32:    2701        .'      MOVS     r7,#1
        0x00000a34:    4339        9C      ORRS     r1,r1,r7
        0x00000a36:    6001        .`      STR      r1,[r0,#0]
        0x00000a38:    6801        .h      LDR      r1,[r0,#0]
        0x00000a3a:    4039        9@      ANDS     r1,r1,r7
        0x00000a3c:    9101        ..      STR      r1,[sp,#4]
        0x00000a3e:    9901        ..      LDR      r1,[sp,#4]
        0x00000a40:    6801        .h      LDR      r1,[r0,#0]
        0x00000a42:    4339        9C      ORRS     r1,r1,r7
        0x00000a44:    6001        .`      STR      r1,[r0,#0]
        0x00000a46:    6800        .h      LDR      r0,[r0,#0]
        0x00000a48:    4038        8@      ANDS     r0,r0,r7
        0x00000a4a:    9001        ..      STR      r0,[sp,#4]
        0x00000a4c:    2400        .$      MOVS     r4,#0
        0x00000a4e:    940a        ..      STR      r4,[sp,#0x28]
        0x00000a50:    9409        ..      STR      r4,[sp,#0x24]
        0x00000a52:    9406        ..      STR      r4,[sp,#0x18]
        0x00000a54:    9405        ..      STR      r4,[sp,#0x14]
        0x00000a56:    9603        ..      STR      r6,[sp,#0xc]
        0x00000a58:    2010        .       MOVS     r0,#0x10
        0x00000a5a:    9002        ..      STR      r0,[sp,#8]
        0x00000a5c:    970e        ..      STR      r7,[sp,#0x38]
        0x00000a5e:    9704        ..      STR      r7,[sp,#0x10]
        0x00000a60:    9801        ..      LDR      r0,[sp,#4]
        0x00000a62:    480c        .H      LDR      r0,[pc,#48] ; [0xa94] = 0x40021000
        0x00000a64:    ad02        ..      ADD      r5,sp,#8
        0x00000a66:    4629        )F      MOV      r1,r5
        0x00000a68:    f7fffbc2    ....    BL       HAL_GPIO_Init ; 0x1f0
        0x00000a6c:    940a        ..      STR      r4,[sp,#0x28]
        0x00000a6e:    9409        ..      STR      r4,[sp,#0x24]
        0x00000a70:    9406        ..      STR      r4,[sp,#0x18]
        0x00000a72:    9405        ..      STR      r4,[sp,#0x14]
        0x00000a74:    9603        ..      STR      r6,[sp,#0xc]
        0x00000a76:    2008        .       MOVS     r0,#8
        0x00000a78:    9002        ..      STR      r0,[sp,#8]
        0x00000a7a:    970e        ..      STR      r7,[sp,#0x38]
        0x00000a7c:    9404        ..      STR      r4,[sp,#0x10]
        0x00000a7e:    4805        .H      LDR      r0,[pc,#20] ; [0xa94] = 0x40021000
        0x00000a80:    4629        )F      MOV      r1,r5
        0x00000a82:    f7fffbb5    ....    BL       HAL_GPIO_Init ; 0x1f0
        0x00000a86:    b00f        ..      ADD      sp,sp,#0x3c
        0x00000a88:    bdf0        ..      POP      {r4-r7,pc}
        0x00000a8a:    46c0        .F      MOV      r8,r8
    $d.2
    __arm_cp.1_0
        0x00000a8c:    40000400    ...@    DCD    1073742848
    __arm_cp.1_1
        0x00000a90:    40020008    ...@    DCD    1073872904
    __arm_cp.1_2
        0x00000a94:    40021000    ...@    DCD    1073876992
    $t.14
    HAL_UART_Receive_IT
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_uart.c (2236)
        0x00000a98:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x00000a9a:    4603        .F      MOV      r3,r0
        0x00000a9c:    202e        .       MOVS     r0,#0x2e
        0x00000a9e:    5c18        .\      LDRB     r0,[r3,r0]
        0x00000aa0:    2402        .$      MOVS     r4,#2
        0x00000aa2:    2820         (      CMP      r0,#0x20
        0x00000aa4:    d120         .      BNE      0xae8 ; HAL_UART_Receive_IT + 80
        0x00000aa6:    2001        .       MOVS     r0,#1
        0x00000aa8:    2900        .)      CMP      r1,#0
        0x00000aaa:    d01c        ..      BEQ      0xae6 ; HAL_UART_Receive_IT + 78
        0x00000aac:    2a00        .*      CMP      r2,#0
        0x00000aae:    d01a        ..      BEQ      0xae6 ; HAL_UART_Receive_IT + 78
        0x00000ab0:    461d        .F      MOV      r5,r3
        0x00000ab2:    352c        ,5      ADDS     r5,r5,#0x2c
        0x00000ab4:    7828        (x      LDRB     r0,[r5,#0]
        0x00000ab6:    2801        .(      CMP      r0,#1
        0x00000ab8:    4620         F      MOV      r0,r4
        0x00000aba:    d014        ..      BEQ      0xae6 ; HAL_UART_Receive_IT + 78
        0x00000abc:    855a        Z.      STRH     r2,[r3,#0x2a]
        0x00000abe:    851a        ..      STRH     r2,[r3,#0x28]
        0x00000ac0:    6259        Yb      STR      r1,[r3,#0x24]
        0x00000ac2:    2000        .       MOVS     r0,#0
        0x00000ac4:    6318        .c      STR      r0,[r3,#0x30]
        0x00000ac6:    7028        (p      STRB     r0,[r5,#0]
        0x00000ac8:    2122        "!      MOVS     r1,#0x22
        0x00000aca:    70a9        .p      STRB     r1,[r5,#2]
        0x00000acc:    6819        .h      LDR      r1,[r3,#0]
        0x00000ace:    680a        .h      LDR      r2,[r1,#0]
        0x00000ad0:    2310        .#      MOVS     r3,#0x10
        0x00000ad2:    4313        .C      ORRS     r3,r3,r2
        0x00000ad4:    600b        .`      STR      r3,[r1,#0]
        0x00000ad6:    694a        Ji      LDR      r2,[r1,#0x14]
        0x00000ad8:    2305        .#      MOVS     r3,#5
        0x00000ada:    4313        .C      ORRS     r3,r3,r2
        0x00000adc:    614b        Ka      STR      r3,[r1,#0x14]
        0x00000ade:    680a        .h      LDR      r2,[r1,#0]
        0x00000ae0:    2301        .#      MOVS     r3,#1
        0x00000ae2:    4313        .C      ORRS     r3,r3,r2
        0x00000ae4:    600b        .`      STR      r3,[r1,#0]
        0x00000ae6:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x00000ae8:    4620         F      MOV      r0,r4
        0x00000aea:    bdb0        ..      POP      {r4,r5,r7,pc}
    HAL_UART_Transmit_IT
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_uart.c (2086)
        0x00000aec:    b570        p.      PUSH     {r4-r6,lr}
        0x00000aee:    232d        -#      MOVS     r3,#0x2d
        0x00000af0:    5cc3        .\      LDRB     r3,[r0,r3]
        0x00000af2:    2402        .$      MOVS     r4,#2
        0x00000af4:    2b20         +      CMP      r3,#0x20
        0x00000af6:    d10c        ..      BNE      0xb12 ; HAL_UART_Transmit_IT + 38
        0x00000af8:    2301        .#      MOVS     r3,#1
        0x00000afa:    2900        .)      CMP      r1,#0
        0x00000afc:    d007        ..      BEQ      0xb0e ; HAL_UART_Transmit_IT + 34
        0x00000afe:    2a00        .*      CMP      r2,#0
        0x00000b00:    d005        ..      BEQ      0xb0e ; HAL_UART_Transmit_IT + 34
        0x00000b02:    4605        .F      MOV      r5,r0
        0x00000b04:    352c        ,5      ADDS     r5,r5,#0x2c
        0x00000b06:    782b        +x      LDRB     r3,[r5,#0]
        0x00000b08:    2b01        .+      CMP      r3,#1
        0x00000b0a:    4623        #F      MOV      r3,r4
        0x00000b0c:    d103        ..      BNE      0xb16 ; HAL_UART_Transmit_IT + 42
        0x00000b0e:    4618        .F      MOV      r0,r3
        0x00000b10:    bd70        p.      POP      {r4-r6,pc}
        0x00000b12:    4620         F      MOV      r0,r4
        0x00000b14:    bd70        p.      POP      {r4-r6,pc}
        0x00000b16:    8442        B.      STRH     r2,[r0,#0x22]
        0x00000b18:    8402        ..      STRH     r2,[r0,#0x20]
        0x00000b1a:    61c1        .a      STR      r1,[r0,#0x1c]
        0x00000b1c:    2300        .#      MOVS     r3,#0
        0x00000b1e:    6303        .c      STR      r3,[r0,#0x30]
        0x00000b20:    702b        +p      STRB     r3,[r5,#0]
        0x00000b22:    2221        !"      MOVS     r2,#0x21
        0x00000b24:    706a        jp      STRB     r2,[r5,#1]
        0x00000b26:    6802        .h      LDR      r2,[r0,#0]
        0x00000b28:    6814        .h      LDR      r4,[r2,#0]
        0x00000b2a:    2502        .%      MOVS     r5,#2
        0x00000b2c:    4325        %C      ORRS     r5,r5,r4
        0x00000b2e:    6015        .`      STR      r5,[r2,#0]
        0x00000b30:    6904        .i      LDR      r4,[r0,#0x10]
        0x00000b32:    2c00        .,      CMP      r4,#0
        0x00000b34:    d00e        ..      BEQ      0xb54 ; HAL_UART_Transmit_IT + 104
        0x00000b36:    2cc0        .,      CMP      r4,#0xc0
        0x00000b38:    d001        ..      BEQ      0xb3e ; HAL_UART_Transmit_IT + 82
        0x00000b3a:    2c80        .,      CMP      r4,#0x80
        0x00000b3c:    d11a        ..      BNE      0xb74 ; HAL_UART_Transmit_IT + 136
        0x00000b3e:    6944        Di      LDR      r4,[r0,#0x14]
        0x00000b40:    2c02        .,      CMP      r4,#2
        0x00000b42:    d00c        ..      BEQ      0xb5e ; HAL_UART_Transmit_IT + 114
        0x00000b44:    2c01        .,      CMP      r4,#1
        0x00000b46:    d115        ..      BNE      0xb74 ; HAL_UART_Transmit_IT + 136
        0x00000b48:    780c        .x      LDRB     r4,[r1,#0]
        0x00000b4a:    4d0f        .M      LDR      r5,[pc,#60] ; [0xb88] = 0xeda
        0x00000b4c:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x00000b4e:    07e4        ..      LSLS     r4,r4,#31
        0x00000b50:    0f24        $.      LSRS     r4,r4,#28
        0x00000b52:    e00a        ..      B        0xb6a ; HAL_UART_Transmit_IT + 126
        0x00000b54:    6814        .h      LDR      r4,[r2,#0]
        0x00000b56:    2510        .%      MOVS     r5,#0x10
        0x00000b58:    43ac        .C      BICS     r4,r4,r5
        0x00000b5a:    6014        .`      STR      r4,[r2,#0]
        0x00000b5c:    e00a        ..      B        0xb74 ; HAL_UART_Transmit_IT + 136
        0x00000b5e:    780c        .x      LDRB     r4,[r1,#0]
        0x00000b60:    4d09        .M      LDR      r5,[pc,#36] ; [0xb88] = 0xeda
        0x00000b62:    5d2c        ,]      LDRB     r4,[r5,r4]
        0x00000b64:    00e5        ..      LSLS     r5,r4,#3
        0x00000b66:    2408        .$      MOVS     r4,#8
        0x00000b68:    43ac        .C      BICS     r4,r4,r5
        0x00000b6a:    6815        .h      LDR      r5,[r2,#0]
        0x00000b6c:    2608        .&      MOVS     r6,#8
        0x00000b6e:    43b5        .C      BICS     r5,r5,r6
        0x00000b70:    4325        %C      ORRS     r5,r5,r4
        0x00000b72:    6015        .`      STR      r5,[r2,#0]
        0x00000b74:    780c        .x      LDRB     r4,[r1,#0]
        0x00000b76:    6054        T`      STR      r4,[r2,#4]
        0x00000b78:    1c49        I.      ADDS     r1,r1,#1
        0x00000b7a:    61c1        .a      STR      r1,[r0,#0x1c]
        0x00000b7c:    8c41        A.      LDRH     r1,[r0,#0x22]
        0x00000b7e:    1e49        I.      SUBS     r1,r1,#1
        0x00000b80:    8441        A.      STRH     r1,[r0,#0x22]
        0x00000b82:    4618        .F      MOV      r0,r3
        0x00000b84:    bd70        p.      POP      {r4-r6,pc}
        0x00000b86:    46c0        .F      MOV      r8,r8
    $d.13
    __arm_cp.9_0
        0x00000b88:    00000eda    ....    DCD    3802
    $t.1
    HardFault_Handler
;;; ../Src\cs32l015_it.c
;;;102    /* please refer to the startup file (startup_cs32l015.s).                    */
        0x00000b8c:    be00        ..      BKPT     #0
        0x00000b8e:    4770        pG      BX       lr
    NMI_Handler
;;; ../Src\cs32l015_it.c (55)
        0x00000b90:    4770        pG      BX       lr
    PendSV_Handler
;;;56     {
;;;57         /* USER CODE BEGIN HardFault_IRQn 0 */
;;;58         /* USER CODE END HardFault_IRQn 0 */
;;;59     
;;;60         /* USER CODE BEGIN W1_HardFault_IRQn 0 */
;;;61         __BKPT(0);
;;;62         /* USER CODE END W1_HardFault_IRQn 0 */
;;;63     
;;;64     }
;;;65     
;;;66     /**
;;;67      * @brief This function handles System service call via SWI instruction.
;;;68      */
;;;69     void SVC_Handler(void)
;;;70     {
;;;71         /* USER CODE BEGIN SVCall_IRQn 0 */
;;;72         /* USER CODE END SVCall_IRQn 0 */
;;;73     }
;;;74     
;;;75     /**
;;;76      * @brief This function handles Pendable request for system service.
;;;77      */
;;;78     void PendSV_Handler(void)
;;;79     {
;;;80         /* USER CODE BEGIN PendSV_IRQn 0 */
;;;81         /* USER CODE END PendSV_IRQn 0 */
;;;82     }
;;;83     
;;;84     /**
;;;85      * @brief This function handles System tick timer.
;;;86      */
;;;87     void SysTick_Handler(void)
        0x00000b92:    4770        pG      BX       lr
    RCC_Delay
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_rcc.c
;;;544            else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LXT)
        0x00000b94:    b580        ..      PUSH     {r7,lr}
        0x00000b96:    b082        ..      SUB      sp,sp,#8
        0x00000b98:    4807        .H      LDR      r0,[pc,#28] ; [0xbb8] = 0x20000000
        0x00000b9a:    6800        .h      LDR      r0,[r0,#0]
        0x00000b9c:    217d        }!      MOVS     r1,#0x7d
        0x00000b9e:    0189        ..      LSLS     r1,r1,#6
        0x00000ba0:    f7fffab8    ....    BL       __aeabi_uidiv ; 0x114
        0x00000ba4:    9001        ..      STR      r0,[sp,#4]
        0x00000ba6:    bf00        ..      NOP      
        0x00000ba8:    9801        ..      LDR      r0,[sp,#4]
        0x00000baa:    1e41        A.      SUBS     r1,r0,#1
        0x00000bac:    9101        ..      STR      r1,[sp,#4]
        0x00000bae:    2800        .(      CMP      r0,#0
        0x00000bb0:    d1f9        ..      BNE      0xba6 ; RCC_Delay + 18
        0x00000bb2:    b002        ..      ADD      sp,sp,#8
        0x00000bb4:    bd80        ..      POP      {r7,pc}
        0x00000bb6:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.2_0
        0x00000bb8:    20000000    ...     DCD    536870912
    $t.2
    SVC_Handler
;;; ../Src\cs32l015_it.c
;;;78     void PendSV_Handler(void)
        0x00000bbc:    4770        pG      BX       lr
        0x00000bbe:    0000        ..      MOVS     r0,r0
    SysTick_Config
;;; C:/Users\dinh.bui\AppData\Local\Arm\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include\core_cm0plus.h
;;;615    /**
        0x00000bc0:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x00000bc2:    1e40        @.      SUBS     r0,r0,#1
        0x00000bc4:    0e01        ..      LSRS     r1,r0,#24
        0x00000bc6:    d002        ..      BEQ      0xbce ; SysTick_Config + 14
        0x00000bc8:    2401        .$      MOVS     r4,#1
        0x00000bca:    4620         F      MOV      r0,r4
        0x00000bcc:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x00000bce:    4d06        .M      LDR      r5,[pc,#24] ; [0xbe8] = 0xe000e010
        0x00000bd0:    6068        h`      STR      r0,[r5,#4]
        0x00000bd2:    2400        .$      MOVS     r4,#0
        0x00000bd4:    43e0        .C      MVNS     r0,r4
        0x00000bd6:    2103        .!      MOVS     r1,#3
        0x00000bd8:    f000f8e4    ....    BL       __NVIC_SetPriority ; 0xda4
        0x00000bdc:    60ac        .`      STR      r4,[r5,#8]
        0x00000bde:    2007        .       MOVS     r0,#7
        0x00000be0:    6028        (`      STR      r0,[r5,#0]
        0x00000be2:    4620         F      MOV      r0,r4
        0x00000be4:    bdb0        ..      POP      {r4,r5,r7,pc}
        0x00000be6:    46c0        .F      MOV      r8,r8
    $d.14
    __arm_cp.9_0
        0x00000be8:    e000e010    ....    DCD    3758153744
    $t.4
    SysTick_Handler
;;; ../Src\cs32l015_it.c (190)
        0x00000bec:    b580        ..      PUSH     {r7,lr}
        0x00000bee:    f7fffc03    ....    BL       HAL_IncTick ; 0x3f8
        0x00000bf2:    bd80        ..      POP      {r7,pc}
    SystemInit
;;; RTE/Device/CS32L015\system_cs32l015.c (895)
        0x00000bf4:    490e        .I      LDR      r1,[pc,#56] ; [0xc30] = 0x55aa6698
        0x00000bf6:    1c4a        J.      ADDS     r2,r1,#1
        0x00000bf8:    480e        .H      LDR      r0,[pc,#56] ; [0xc34] = 0x40020060
        0x00000bfa:    6002        .`      STR      r2,[r0,#0]
        0x00000bfc:    4602        .F      MOV      r2,r0
        0x00000bfe:    3a40        @:      SUBS     r2,r2,#0x40
        0x00000c00:    4b0d        .K      LDR      r3,[pc,#52] ; [0xc38] = 0x5a690001
        0x00000c02:    6013        .`      STR      r3,[r2,#0]
        0x00000c04:    6001        .`      STR      r1,[r0,#0]
        0x00000c06:    4602        .F      MOV      r2,r0
        0x00000c08:    3a60        `:      SUBS     r2,r2,#0x60
        0x00000c0a:    2100        .!      MOVS     r1,#0
        0x00000c0c:    6011        .`      STR      r1,[r2,#0]
        0x00000c0e:    4602        .F      MOV      r2,r0
        0x00000c10:    3a5c        \:      SUBS     r2,r2,#0x5c
        0x00000c12:    6011        .`      STR      r1,[r2,#0]
        0x00000c14:    4602        .F      MOV      r2,r0
        0x00000c16:    3a58        X:      SUBS     r2,r2,#0x58
        0x00000c18:    23ff        .#      MOVS     r3,#0xff
        0x00000c1a:    330a        .3      ADDS     r3,r3,#0xa
        0x00000c1c:    6013        .`      STR      r3,[r2,#0]
        0x00000c1e:    4602        .F      MOV      r2,r0
        0x00000c20:    3a54        T:      SUBS     r2,r2,#0x54
        0x00000c22:    6011        .`      STR      r1,[r2,#0]
        0x00000c24:    3850        P8      SUBS     r0,r0,#0x50
        0x00000c26:    6001        .`      STR      r1,[r0,#0]
        0x00000c28:    4804        .H      LDR      r0,[pc,#16] ; [0xc3c] = 0xe000ed08
        0x00000c2a:    6001        .`      STR      r1,[r0,#0]
        0x00000c2c:    4770        pG      BX       lr
        0x00000c2e:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x00000c30:    55aa6698    .f.U    DCD    1437230744
    __arm_cp.0_1
        0x00000c34:    40020060    `..@    DCD    1073872992
    __arm_cp.0_2
        0x00000c38:    5a690001    ..iZ    DCD    1516830721
    __arm_cp.0_3
        0x00000c3c:    e000ed08    ....    DCD    3758157064
    $t.8
    UART2_3_IRQHandler
;;; ../Src\main.c (778)
        0x00000c40:    4897        .H      LDR      r0,[pc,#604] ; [0xea0] = 0x20000018
        0x00000c42:    6800        .h      LDR      r0,[r0,#0]
        0x00000c44:    6901        .i      LDR      r1,[r0,#0x10]
        0x00000c46:    07c9        ..      LSLS     r1,r1,#31
        0x00000c48:    d012        ..      BEQ      0xc70 ; UART2_3_IRQHandler + 48
        0x00000c4a:    4998        .I      LDR      r1,[pc,#608] ; [0xeac] = 0x20000181
        0x00000c4c:    780a        .x      LDRB     r2,[r1,#0]
        0x00000c4e:    1c52        R.      ADDS     r2,r2,#1
        0x00000c50:    700a        .p      STRB     r2,[r1,#0]
        0x00000c52:    6841        Ah      LDR      r1,[r0,#4]
        0x00000c54:    4a98        .J      LDR      r2,[pc,#608] ; [0xeb8] = 0x20000080
        0x00000c56:    7011        .p      STRB     r1,[r2,#0]
        0x00000c58:    6941        Ai      LDR      r1,[r0,#0x14]
        0x00000c5a:    2205        ."      MOVS     r2,#5
        0x00000c5c:    430a        .C      ORRS     r2,r2,r1
        0x00000c5e:    6142        Ba      STR      r2,[r0,#0x14]
        0x00000c60:    6801        .h      LDR      r1,[r0,#0]
        0x00000c62:    2201        ."      MOVS     r2,#1
        0x00000c64:    430a        .C      ORRS     r2,r2,r1
        0x00000c66:    6002        .`      STR      r2,[r0,#0]
        0x00000c68:    6941        Ai      LDR      r1,[r0,#0x14]
        0x00000c6a:    2202        ."      MOVS     r2,#2
        0x00000c6c:    430a        .C      ORRS     r2,r2,r1
        0x00000c6e:    6142        Ba      STR      r2,[r0,#0x14]
        0x00000c70:    4770        pG      BX       lr
        0x00000c72:    46c0        .F      MOV      r8,r8
    UART_SetConfig
;;; C:/Users\dinh.bui\Downloads\Chipsea.CS32L015_DFP\Device\HAL_Driver\src\cs32l015_hal_uart.c (2153)
        0x00000c74:    b5f0        ..      PUSH     {r4-r7,lr}
        0x00000c76:    b083        ..      SUB      sp,sp,#0xc
        0x00000c78:    4604        .F      MOV      r4,r0
        0x00000c7a:    202d        -       MOVS     r0,#0x2d
        0x00000c7c:    0101        ..      LSLS     r1,r0,#4
        0x00000c7e:    6820         h      LDR      r0,[r4,#0]
        0x00000c80:    6802        .h      LDR      r2,[r0,#0]
        0x00000c82:    438a        .C      BICS     r2,r2,r1
        0x00000c84:    68a1        .h      LDR      r1,[r4,#8]
        0x00000c86:    4311        .C      ORRS     r1,r1,r2
        0x00000c88:    6922        "i      LDR      r2,[r4,#0x10]
        0x00000c8a:    430a        .C      ORRS     r2,r2,r1
        0x00000c8c:    69a1        .i      LDR      r1,[r4,#0x18]
        0x00000c8e:    4311        .C      ORRS     r1,r1,r2
        0x00000c90:    6001        .`      STR      r1,[r0,#0]
        0x00000c92:    7b61        a{      LDRB     r1,[r4,#0xd]
        0x00000c94:    2900        .)      CMP      r1,#0
        0x00000c96:    d006        ..      BEQ      0xca6 ; UART_SetConfig + 50
        0x00000c98:    2101        .!      MOVS     r1,#1
        0x00000c9a:    0409        ..      LSLS     r1,r1,#16
        0x00000c9c:    6982        .i      LDR      r2,[r0,#0x18]
        0x00000c9e:    438a        .C      BICS     r2,r2,r1
        0x00000ca0:    6182        .a      STR      r2,[r0,#0x18]
        0x00000ca2:    b003        ..      ADD      sp,sp,#0xc
        0x00000ca4:    bdf0        ..      POP      {r4-r7,pc}
        0x00000ca6:    f7fffca1    ....    BL       HAL_RCC_GetPCLKFreq ; 0x5ec
        0x00000caa:    68a1        .h      LDR      r1,[r4,#8]
        0x00000cac:    0589        ..      LSLS     r1,r1,#22
        0x00000cae:    0fc9        ..      LSRS     r1,r1,#31
        0x00000cb0:    4088        .@      LSLS     r0,r0,r1
        0x00000cb2:    9400        ..      STR      r4,[sp,#0]
        0x00000cb4:    6861        ah      LDR      r1,[r4,#4]
        0x00000cb6:    9101        ..      STR      r1,[sp,#4]
        0x00000cb8:    0149        I.      LSLS     r1,r1,#5
        0x00000cba:    9002        ..      STR      r0,[sp,#8]
        0x00000cbc:    f7fffa2a    ..*.    BL       __aeabi_uidiv ; 0x114
        0x00000cc0:    1c44        D.      ADDS     r4,r0,#1
        0x00000cc2:    2605        .&      MOVS     r6,#5
        0x00000cc4:    4d17        .M      LDR      r5,[pc,#92] ; [0xd24] = 0xffff
        0x00000cc6:    4627        'F      MOV      r7,r4
        0x00000cc8:    e003        ..      B        0xcd2 ; UART_SetConfig + 94
        0x00000cca:    1e76        v.      SUBS     r6,r6,#1
        0x00000ccc:    460d        .F      MOV      r5,r1
        0x00000cce:    4607        .F      MOV      r7,r0
        0x00000cd0:    d014        ..      BEQ      0xcfc ; UART_SetConfig + 136
        0x00000cd2:    b2a0        ..      UXTH     r0,r4
        0x00000cd4:    0141        A.      LSLS     r1,r0,#5
        0x00000cd6:    9802        ..      LDR      r0,[sp,#8]
        0x00000cd8:    f7fffa1c    ....    BL       __aeabi_uidiv ; 0x114
        0x00000cdc:    9a01        ..      LDR      r2,[sp,#4]
        0x00000cde:    1a11        ..      SUBS     r1,r2,r0
        0x00000ce0:    d200        ..      BCS      0xce4 ; UART_SetConfig + 112
        0x00000ce2:    1a81        ..      SUBS     r1,r0,r2
        0x00000ce4:    42a9        .B      CMP      r1,r5
        0x00000ce6:    4620         F      MOV      r0,r4
        0x00000ce8:    d300        ..      BCC      0xcec ; UART_SetConfig + 120
        0x00000cea:    4638        8F      MOV      r0,r7
        0x00000cec:    42a9        .B      CMP      r1,r5
        0x00000cee:    d300        ..      BCC      0xcf2 ; UART_SetConfig + 126
        0x00000cf0:    4629        )F      MOV      r1,r5
        0x00000cf2:    1e64        d.      SUBS     r4,r4,#1
        0x00000cf4:    0422        ".      LSLS     r2,r4,#16
        0x00000cf6:    d1e8        ..      BNE      0xcca ; UART_SetConfig + 86
        0x00000cf8:    2401        .$      MOVS     r4,#1
        0x00000cfa:    e7e6        ..      B        0xcca ; UART_SetConfig + 86
        0x00000cfc:    b281        ..      UXTH     r1,r0
        0x00000cfe:    2901        .)      CMP      r1,#1
        0x00000d00:    9900        ..      LDR      r1,[sp,#0]
        0x00000d02:    d801        ..      BHI      0xd08 ; UART_SetConfig + 148
        0x00000d04:    2001        .       MOVS     r0,#1
        0x00000d06:    e000        ..      B        0xd0a ; UART_SetConfig + 150
        0x00000d08:    1e40        @.      SUBS     r0,r0,#1
        0x00000d0a:    b280        ..      UXTH     r0,r0
        0x00000d0c:    6809        .h      LDR      r1,[r1,#0]
        0x00000d0e:    698a        .i      LDR      r2,[r1,#0x18]
        0x00000d10:    4b05        .K      LDR      r3,[pc,#20] ; [0xd28] = 0xfffe0000
        0x00000d12:    4013        .@      ANDS     r3,r3,r2
        0x00000d14:    1818        ..      ADDS     r0,r3,r0
        0x00000d16:    4a03        .J      LDR      r2,[pc,#12] ; [0xd24] = 0xffff
        0x00000d18:    1c52        R.      ADDS     r2,r2,#1
        0x00000d1a:    4302        .C      ORRS     r2,r2,r0
        0x00000d1c:    618a        .a      STR      r2,[r1,#0x18]
        0x00000d1e:    b003        ..      ADD      sp,sp,#0xc
        0x00000d20:    bdf0        ..      POP      {r4-r7,pc}
        0x00000d22:    46c0        .F      MOV      r8,r8
    $d.3
    __arm_cp.2_0
        0x00000d24:    0000ffff    ....    DCD    65535
    __arm_cp.2_1
        0x00000d28:    fffe0000    ....    DCD    4294836224
    $t.2
    _SystemClock_Config
;;; ../Src\main.c (1210)
        0x00000d2c:    b5b0        ..      PUSH     {r4,r5,r7,lr}
        0x00000d2e:    b08e        ..      SUB      sp,sp,#0x38
        0x00000d30:    2400        .$      MOVS     r4,#0
        0x00000d32:    940d        ..      STR      r4,[sp,#0x34]
        0x00000d34:    940c        ..      STR      r4,[sp,#0x30]
        0x00000d36:    940b        ..      STR      r4,[sp,#0x2c]
        0x00000d38:    940a        ..      STR      r4,[sp,#0x28]
        0x00000d3a:    9409        ..      STR      r4,[sp,#0x24]
        0x00000d3c:    9408        ..      STR      r4,[sp,#0x20]
        0x00000d3e:    2501        .%      MOVS     r5,#1
        0x00000d40:    9506        ..      STR      r5,[sp,#0x18]
        0x00000d42:    9505        ..      STR      r5,[sp,#0x14]
        0x00000d44:    9404        ..      STR      r4,[sp,#0x10]
        0x00000d46:    9403        ..      STR      r4,[sp,#0xc]
        0x00000d48:    9402        ..      STR      r4,[sp,#8]
        0x00000d4a:    9401        ..      STR      r4,[sp,#4]
        0x00000d4c:    480b        .H      LDR      r0,[pc,#44] ; [0xd7c] = 0x180000a0
        0x00000d4e:    8800        ..      LDRH     r0,[r0,#0]
        0x00000d50:    9007        ..      STR      r0,[sp,#0x1c]
        0x00000d52:    a805        ..      ADD      r0,sp,#0x14
        0x00000d54:    f7fffc8c    ....    BL       HAL_RCC_OscConfig ; 0x670
        0x00000d58:    2800        .(      CMP      r0,#0
        0x00000d5a:    d001        ..      BEQ      0xd60 ; _SystemClock_Config + 52
        0x00000d5c:    f7fffa46    ..F.    BL       Error_Handler ; 0x1ec
        0x00000d60:    9404        ..      STR      r4,[sp,#0x10]
        0x00000d62:    9403        ..      STR      r4,[sp,#0xc]
        0x00000d64:    9502        ..      STR      r5,[sp,#8]
        0x00000d66:    2007        .       MOVS     r0,#7
        0x00000d68:    9001        ..      STR      r0,[sp,#4]
        0x00000d6a:    a801        ..      ADD      r0,sp,#4
        0x00000d6c:    f7fffb7c    ..|.    BL       HAL_RCC_ClockConfig ; 0x468
        0x00000d70:    2800        .(      CMP      r0,#0
        0x00000d72:    d001        ..      BEQ      0xd78 ; _SystemClock_Config + 76
        0x00000d74:    f7fffa3a    ..:.    BL       Error_Handler ; 0x1ec
        0x00000d78:    b00e        ..      ADD      sp,sp,#0x38
        0x00000d7a:    bdb0        ..      POP      {r4,r5,r7,pc}
    $d.3
    __arm_cp.1_0
        0x00000d7c:    180000a0    ....    DCD    402653344
    $t.4
    __NVIC_EnableIRQ
;;; C:/Users\dinh.bui\AppData\Local\Arm\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include\core_cm0plus.h
;;;193      - Core SysTick Register
        0x00000d80:    2001        .       MOVS     r0,#1
        0x00000d82:    0240        @.      LSLS     r0,r0,#9
        0x00000d84:    4901        .I      LDR      r1,[pc,#4] ; [0xd8c] = 0xe000e100
        0x00000d86:    6008        .`      STR      r0,[r1,#0]
        0x00000d88:    4770        pG      BX       lr
        0x00000d8a:    46c0        .F      MOV      r8,r8
    $d.5
    __arm_cp.2_0
        0x00000d8c:    e000e100    ....    DCD    3758153984
    $t.6
    __NVIC_SetPriority
;;;194      - Core MPU Register
;;;195     ******************************************************************************/
;;;196    /**
;;;197      \defgroup CMSIS_core_register Defines and Type Definitions
;;;198      \brief Type definitions and defines for Cortex-M processor based devices.
;;;199    */
;;;200    
;;;201    /**
;;;202      \ingroup    CMSIS_core_register
;;;203      \defgroup   CMSIS_CORE  Status and Control Registers
;;;204      \brief      Core Register type definitions.
;;;205      @{
;;;206     */
;;;207    
;;;208    /**
;;;209      \brief  Union type to access the Application Program Status Register (APSR).
;;;210     */
;;;211    typedef union
;;;212    {
;;;213      struct
;;;214      {
;;;215        uint32_t _reserved0:28;              /*!< bit:  0..27  Reserved */
;;;216        uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
;;;217        uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
;;;218        uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
;;;219        uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
;;;220      } b;                                   /*!< Structure used for bit  access */
;;;221      uint32_t w;                            /*!< Type      used for word access */
;;;222    } APSR_Type;
;;;223    
;;;224    /** \brief APSR Register Definitions */
;;;225    #define APSR_N_Pos                         31U                                            /*!< APSR: N Position */
;;;226    #define APSR_N_Msk                         (1UL << APSR_N_Pos)                            /*!< APSR: N Mask */
;;;227    
;;;228    #define APSR_Z_Pos                         30U                                            /*!< APSR: Z Position */
;;;229    #define APSR_Z_Msk                         (1UL << APSR_Z_Pos)                            /*!< APSR: Z Mask */
;;;230    
;;;231    #define APSR_C_Pos                         29U                                            /*!< APSR: C Position */
;;;232    #define APSR_C_Msk                         (1UL << APSR_C_Pos)                            /*!< APSR: C Mask */
;;;233    
;;;234    #define APSR_V_Pos                         28U                                            /*!< APSR: V Position */
;;;235    #define APSR_V_Msk                         (1UL << APSR_V_Pos)                            /*!< APSR: V Mask */
;;;236    
;;;237    
;;;238    /**
;;;239      \brief  Union type to access the Interrupt Program Status Register (IPSR).
;;;240     */
;;;241    typedef union
;;;242    {
;;;243      struct
;;;244      {
;;;245        uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
;;;246        uint32_t _reserved0:23;              /*!< bit:  9..31  Reserved */
;;;247      } b;                                   /*!< Structure used for bit  access */
;;;248      uint32_t w;                            /*!< Type      used for word access */
;;;249    } IPSR_Type;
        0x00000d90:    20ff        .       MOVS     r0,#0xff
        0x00000d92:    0200        ..      LSLS     r0,r0,#8
        0x00000d94:    4902        .I      LDR      r1,[pc,#8] ; [0xda0] = 0xe000e408
        0x00000d96:    680a        .h      LDR      r2,[r1,#0]
        0x00000d98:    4382        .C      BICS     r2,r2,r0
        0x00000d9a:    600a        .`      STR      r2,[r1,#0]
        0x00000d9c:    4770        pG      BX       lr
        0x00000d9e:    46c0        .F      MOV      r8,r8
    $d.7
    __arm_cp.3_0
        0x00000da0:    e000e408    ....    DCD    3758154760
    $t.1
    __NVIC_SetPriority
;;;250    
;;;251    /** \brief IPSR Register Definitions */
;;;252    #define IPSR_ISR_Pos                        0U                                            /*!< IPSR: ISR Position */
;;;253    #define IPSR_ISR_Msk                       (0x1FFUL /*<< IPSR_ISR_Pos*/)                  /*!< IPSR: ISR Mask */
;;;254    
;;;255    
;;;256    /**
;;;257      \brief  Union type to access the Special-Purpose Program Status Registers (xPSR).
;;;258     */
;;;259    typedef union
;;;260    {
;;;261      struct
;;;262      {
;;;263        uint32_t ISR:9;                      /*!< bit:  0.. 8  Exception number */
;;;264        uint32_t _reserved0:15;              /*!< bit:  9..23  Reserved */
;;;265        uint32_t T:1;                        /*!< bit:     24  Thumb bit        (read 0) */
;;;266        uint32_t _reserved1:3;               /*!< bit: 25..27  Reserved */
;;;267        uint32_t V:1;                        /*!< bit:     28  Overflow condition code flag */
;;;268        uint32_t C:1;                        /*!< bit:     29  Carry condition code flag */
;;;269        uint32_t Z:1;                        /*!< bit:     30  Zero condition code flag */
;;;270        uint32_t N:1;                        /*!< bit:     31  Negative condition code flag */
;;;271      } b;                                   /*!< Structure used for bit  access */
;;;272      uint32_t w;                            /*!< Type      used for word access */
;;;273    } xPSR_Type;
;;;274    
;;;275    /** \brief xPSR Register Definitions */
;;;276    #define xPSR_N_Pos                         31U                                            /*!< xPSR: N Position */
;;;277    #define xPSR_N_Msk                         (1UL << xPSR_N_Pos)                            /*!< xPSR: N Mask */
;;;278    
;;;279    #define xPSR_Z_Pos                         30U                                            /*!< xPSR: Z Position */
;;;280    #define xPSR_Z_Msk                         (1UL << xPSR_Z_Pos)                            /*!< xPSR: Z Mask */
;;;281    
;;;282    #define xPSR_C_Pos                         29U                                            /*!< xPSR: C Position */
;;;283    #define xPSR_C_Msk                         (1UL << xPSR_C_Pos)                            /*!< xPSR: C Mask */
;;;284    
;;;285    #define xPSR_V_Pos                         28U                                            /*!< xPSR: V Position */
;;;286    #define xPSR_V_Msk                         (1UL << xPSR_V_Pos)                            /*!< xPSR: V Mask */
;;;287    
;;;288    #define xPSR_T_Pos                         24U                                            /*!< xPSR: T Position */
;;;289    #define xPSR_T_Msk                         (1UL << xPSR_T_Pos)                            /*!< xPSR: T Mask */
;;;290    
;;;291    #define xPSR_ISR_Pos                        0U                                            /*!< xPSR: ISR Position */
;;;292    #define xPSR_ISR_Msk                       (0x1FFUL /*<< xPSR_ISR_Pos*/)                  /*!< xPSR: ISR Mask */
;;;293    
;;;294    
;;;295    /**
;;;296      \brief  Union type to access the Control Registers (CONTROL).
;;;297     */
;;;298    typedef union
;;;299    {
;;;300      struct
;;;301      {
;;;302        uint32_t nPRIV:1;                    /*!< bit:      0  Execution privilege in Thread mode */
;;;303        uint32_t SPSEL:1;                    /*!< bit:      1  Stack to be used */
;;;304        uint32_t _reserved1:30;              /*!< bit:  2..31  Reserved */
;;;305      } b;                                   /*!< Structure used for bit  access */
;;;306      uint32_t w;                            /*!< Type      used for word access */
;;;307    } CONTROL_Type;
;;;308    
;;;309    /** \brief CONTROL Register Definitions */
;;;310    #define CONTROL_SPSEL_Pos                   1U                                            /*!< CONTROL: SPSEL Position */
;;;311    #define CONTROL_SPSEL_Msk                  (1UL << CONTROL_SPSEL_Pos)                     /*!< CONTROL: SPSEL Mask */
;;;312    
;;;313    #define CONTROL_nPRIV_Pos                   0U                                            /*!< CONTROL: nPRIV Position */
;;;314    #define CONTROL_nPRIV_Msk                  (1UL /*<< CONTROL_nPRIV_Pos*/)                 /*!< CONTROL: nPRIV Mask */
;;;315    
;;;316    /*@} end of group CMSIS_CORE */
;;;317    
;;;318    
;;;319    /**
;;;320      \ingroup    CMSIS_core_register
;;;321      \defgroup   CMSIS_NVIC  Nested Vectored Interrupt Controller (NVIC)
;;;322      \brief      Type definitions for the NVIC Registers
;;;323      @{
;;;324     */
;;;325    
;;;326    /**
;;;327      \brief  Structure type to access the Nested Vectored Interrupt Controller (NVIC).
;;;328     */
;;;329    typedef struct
;;;330    {
;;;331      __IOM uint32_t ISER[1U];               /*!< Offset: 0x000 (R/W)  Interrupt Set Enable Register */
;;;332            uint32_t RESERVED0[31U];
;;;333      __IOM uint32_t ICER[1U];               /*!< Offset: 0x080 (R/W)  Interrupt Clear Enable Register */
;;;334            uint32_t RESERVED1[31U];
;;;335      __IOM uint32_t ISPR[1U];               /*!< Offset: 0x100 (R/W)  Interrupt Set Pending Register */
;;;336            uint32_t RESERVED2[31U];
;;;337      __IOM uint32_t ICPR[1U];               /*!< Offset: 0x180 (R/W)  Interrupt Clear Pending Register */
;;;338            uint32_t RESERVED3[31U];
;;;339            uint32_t RESERVED4[64U];
;;;340      __IOM uint32_t IPR[8U];                /*!< Offset: 0x300 (R/W)  Interrupt Priority Register */
;;;341    }  NVIC_Type;
;;;342    
;;;343    /*@} end of group CMSIS_NVIC */
;;;344    
;;;345    
;;;346    /**
;;;347      \ingroup  CMSIS_core_register
;;;348      \defgroup CMSIS_SCB     System Control Block (SCB)
;;;349      \brief    Type definitions for the System Control Block Registers
;;;350      @{
;;;351     */
;;;352    
;;;353    /**
;;;354      \brief  Structure type to access the System Control Block (SCB).
;;;355     */
;;;356    typedef struct
;;;357    {
;;;358      __IM  uint32_t CPUID;                  /*!< Offset: 0x000 (R/ )  CPUID Base Register */
;;;359      __IOM uint32_t ICSR;                   /*!< Offset: 0x004 (R/W)  Interrupt Control and State Register */
;;;360    #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
;;;361      __IOM uint32_t VTOR;                   /*!< Offset: 0x008 (R/W)  Vector Table Offset Register */
;;;362    #else
;;;363            uint32_t RESERVED0;
;;;364    #endif
;;;365      __IOM uint32_t AIRCR;                  /*!< Offset: 0x00C (R/W)  Application Interrupt and Reset Control Register */
;;;366      __IOM uint32_t SCR;                    /*!< Offset: 0x010 (R/W)  System Control Register */
;;;367      __IOM uint32_t CCR;                    /*!< Offset: 0x014 (R/W)  Configuration Control Register */
;;;368            uint32_t RESERVED1;
;;;369      __IOM uint32_t SHPR[2U];               /*!< Offset: 0x01C (R/W)  System Handlers Priority Registers. [0] is RESERVED */
;;;370      __IOM uint32_t SHCSR;                  /*!< Offset: 0x024 (R/W)  System Handler Control and State Register */
;;;371    } SCB_Type;
;;;372    
;;;373    /** \brief SCB CPUID Register Definitions */
;;;374    #define SCB_CPUID_IMPLEMENTER_Pos          24U                                            /*!< SCB CPUID: IMPLEMENTER Position */
;;;375    #define SCB_CPUID_IMPLEMENTER_Msk          (0xFFUL << SCB_CPUID_IMPLEMENTER_Pos)          /*!< SCB CPUID: IMPLEMENTER Mask */
;;;376    
;;;377    #define SCB_CPUID_VARIANT_Pos              20U                                            /*!< SCB CPUID: VARIANT Position */
;;;378    #define SCB_CPUID_VARIANT_Msk              (0xFUL << SCB_CPUID_VARIANT_Pos)               /*!< SCB CPUID: VARIANT Mask */
;;;379    
;;;380    #define SCB_CPUID_ARCHITECTURE_Pos         16U                                            /*!< SCB CPUID: ARCHITECTURE Position */
;;;381    #define SCB_CPUID_ARCHITECTURE_Msk         (0xFUL << SCB_CPUID_ARCHITECTURE_Pos)          /*!< SCB CPUID: ARCHITECTURE Mask */
;;;382    
;;;383    #define SCB_CPUID_PARTNO_Pos                4U                                            /*!< SCB CPUID: PARTNO Position */
;;;384    #define SCB_CPUID_PARTNO_Msk               (0xFFFUL << SCB_CPUID_PARTNO_Pos)              /*!< SCB CPUID: PARTNO Mask */
;;;385    
;;;386    #define SCB_CPUID_REVISION_Pos              0U                                            /*!< SCB CPUID: REVISION Position */
;;;387    #define SCB_CPUID_REVISION_Msk             (0xFUL /*<< SCB_CPUID_REVISION_Pos*/)          /*!< SCB CPUID: REVISION Mask */
;;;388    
;;;389    /** \brief SCB Interrupt Control State Register Definitions */
;;;390    #define SCB_ICSR_NMIPENDSET_Pos            31U                                            /*!< SCB ICSR: NMIPENDSET Position */
;;;391    #define SCB_ICSR_NMIPENDSET_Msk            (1UL << SCB_ICSR_NMIPENDSET_Pos)               /*!< SCB ICSR: NMIPENDSET Mask */
;;;392    
;;;393    #define SCB_ICSR_PENDSVSET_Pos             28U                                            /*!< SCB ICSR: PENDSVSET Position */
;;;394    #define SCB_ICSR_PENDSVSET_Msk             (1UL << SCB_ICSR_PENDSVSET_Pos)                /*!< SCB ICSR: PENDSVSET Mask */
;;;395    
;;;396    #define SCB_ICSR_PENDSVCLR_Pos             27U                                            /*!< SCB ICSR: PENDSVCLR Position */
;;;397    #define SCB_ICSR_PENDSVCLR_Msk             (1UL << SCB_ICSR_PENDSVCLR_Pos)                /*!< SCB ICSR: PENDSVCLR Mask */
;;;398    
;;;399    #define SCB_ICSR_PENDSTSET_Pos             26U                                            /*!< SCB ICSR: PENDSTSET Position */
;;;400    #define SCB_ICSR_PENDSTSET_Msk             (1UL << SCB_ICSR_PENDSTSET_Pos)                /*!< SCB ICSR: PENDSTSET Mask */
;;;401    
;;;402    #define SCB_ICSR_PENDSTCLR_Pos             25U                                            /*!< SCB ICSR: PENDSTCLR Position */
;;;403    #define SCB_ICSR_PENDSTCLR_Msk             (1UL << SCB_ICSR_PENDSTCLR_Pos)                /*!< SCB ICSR: PENDSTCLR Mask */
;;;404    
;;;405    #define SCB_ICSR_ISRPREEMPT_Pos            23U                                            /*!< SCB ICSR: ISRPREEMPT Position */
;;;406    #define SCB_ICSR_ISRPREEMPT_Msk            (1UL << SCB_ICSR_ISRPREEMPT_Pos)               /*!< SCB ICSR: ISRPREEMPT Mask */
;;;407    
;;;408    #define SCB_ICSR_ISRPENDING_Pos            22U                                            /*!< SCB ICSR: ISRPENDING Position */
;;;409    #define SCB_ICSR_ISRPENDING_Msk            (1UL << SCB_ICSR_ISRPENDING_Pos)               /*!< SCB ICSR: ISRPENDING Mask */
;;;410    
;;;411    #define SCB_ICSR_VECTPENDING_Pos           12U                                            /*!< SCB ICSR: VECTPENDING Position */
;;;412    #define SCB_ICSR_VECTPENDING_Msk           (0x1FFUL << SCB_ICSR_VECTPENDING_Pos)          /*!< SCB ICSR: VECTPENDING Mask */
;;;413    
;;;414    #define SCB_ICSR_VECTACTIVE_Pos             0U                                            /*!< SCB ICSR: VECTACTIVE Position */
;;;415    #define SCB_ICSR_VECTACTIVE_Msk            (0x1FFUL /*<< SCB_ICSR_VECTACTIVE_Pos*/)       /*!< SCB ICSR: VECTACTIVE Mask */
;;;416    
;;;417    #if defined (__VTOR_PRESENT) && (__VTOR_PRESENT == 1U)
;;;418    /** \brief SCB Vector Table Offset Register Definitions */
;;;419    #define SCB_VTOR_TBLOFF_Pos                 8U                                            /*!< SCB VTOR: TBLOFF Position */
;;;420    #define SCB_VTOR_TBLOFF_Msk                (0xFFFFFFUL << SCB_VTOR_TBLOFF_Pos)            /*!< SCB VTOR: TBLOFF Mask */
;;;421    #endif
;;;422    
;;;423    /** \brief SCB Application Interrupt and Reset Control Register Definitions */
;;;424    #define SCB_AIRCR_VECTKEY_Pos              16U                                            /*!< SCB AIRCR: VECTKEY Position */
;;;425    #define SCB_AIRCR_VECTKEY_Msk              (0xFFFFUL << SCB_AIRCR_VECTKEY_Pos)            /*!< SCB AIRCR: VECTKEY Mask */
;;;426    
;;;427    #define SCB_AIRCR_VECTKEYSTAT_Pos          16U                                            /*!< SCB AIRCR: VECTKEYSTAT Position */
;;;428    #define SCB_AIRCR_VECTKEYSTAT_Msk          (0xFFFFUL << SCB_AIRCR_VECTKEYSTAT_Pos)        /*!< SCB AIRCR: VECTKEYSTAT Mask */
;;;429    
;;;430    #define SCB_AIRCR_ENDIANNESS_Pos           15U                                            /*!< SCB AIRCR: ENDIANNESS Position */
;;;431    #define SCB_AIRCR_ENDIANNESS_Msk           (1UL << SCB_AIRCR_ENDIANNESS_Pos)              /*!< SCB AIRCR: ENDIANNESS Mask */
;;;432    
;;;433    #define SCB_AIRCR_SYSRESETREQ_Pos           2U                                            /*!< SCB AIRCR: SYSRESETREQ Position */
;;;434    #define SCB_AIRCR_SYSRESETREQ_Msk          (1UL << SCB_AIRCR_SYSRESETREQ_Pos)             /*!< SCB AIRCR: SYSRESETREQ Mask */
;;;435    
;;;436    #define SCB_AIRCR_VECTCLRACTIVE_Pos         1U                                            /*!< SCB AIRCR: VECTCLRACTIVE Position */
;;;437    #define SCB_AIRCR_VECTCLRACTIVE_Msk        (1UL << SCB_AIRCR_VECTCLRACTIVE_Pos)           /*!< SCB AIRCR: VECTCLRACTIVE Mask */
;;;438    
;;;439    /** \brief SCB System Control Register Definitions */
;;;440    #define SCB_SCR_SEVONPEND_Pos               4U                                            /*!< SCB SCR: SEVONPEND Position */
;;;441    #define SCB_SCR_SEVONPEND_Msk              (1UL << SCB_SCR_SEVONPEND_Pos)                 /*!< SCB SCR: SEVONPEND Mask */
;;;442    
;;;443    #define SCB_SCR_SLEEPDEEP_Pos               2U                                            /*!< SCB SCR: SLEEPDEEP Position */
;;;444    #define SCB_SCR_SLEEPDEEP_Msk              (1UL << SCB_SCR_SLEEPDEEP_Pos)                 /*!< SCB SCR: SLEEPDEEP Mask */
;;;445    
;;;446    #define SCB_SCR_SLEEPONEXIT_Pos             1U                                            /*!< SCB SCR: SLEEPONEXIT Position */
;;;447    #define SCB_SCR_SLEEPONEXIT_Msk            (1UL << SCB_SCR_SLEEPONEXIT_Pos)               /*!< SCB SCR: SLEEPONEXIT Mask */
;;;448    
;;;449    /** \brief SCB Configuration Control Register Definitions */
;;;450    #define SCB_CCR_STKALIGN_Pos                9U                                            /*!< SCB CCR: STKALIGN Position */
;;;451    #define SCB_CCR_STKALIGN_Msk               (1UL << SCB_CCR_STKALIGN_Pos)                  /*!< SCB CCR: STKALIGN Mask */
;;;452    
;;;453    #define SCB_CCR_UNALIGN_TRP_Pos             3U                                            /*!< SCB CCR: UNALIGN_TRP Position */
;;;454    #define SCB_CCR_UNALIGN_TRP_Msk            (1UL << SCB_CCR_UNALIGN_TRP_Pos)               /*!< SCB CCR: UNALIGN_TRP Mask */
;;;455    
;;;456    /** \brief SCB System Handler Control and State Register Definitions */
;;;457    #define SCB_SHCSR_SVCALLPENDED_Pos         15U                                            /*!< SCB SHCSR: SVCALLPENDED Position */
;;;458    #define SCB_SHCSR_SVCALLPENDED_Msk         (1UL << SCB_SHCSR_SVCALLPENDED_Pos)            /*!< SCB SHCSR: SVCALLPENDED Mask */
;;;459    
;;;460    /*@} end of group CMSIS_SCB */
;;;461    
;;;462    
;;;463    /**
;;;464      \ingroup  CMSIS_core_register
;;;465      \defgroup CMSIS_SysTick     System Tick Timer (SysTick)
;;;466      \brief    Type definitions for the System Timer Registers.
;;;467      @{
;;;468     */
;;;469    
;;;470    /**
;;;471      \brief  Structure type to access the System Timer (SysTick).
;;;472     */
;;;473    typedef struct
;;;474    {
;;;475      __IOM uint32_t CTRL;                   /*!< Offset: 0x000 (R/W)  SysTick Control and Status Register */
;;;476      __IOM uint32_t LOAD;                   /*!< Offset: 0x004 (R/W)  SysTick Reload Value Register */
;;;477      __IOM uint32_t VAL;                    /*!< Offset: 0x008 (R/W)  SysTick Current Value Register */
;;;478      __IM  uint32_t CALIB;                  /*!< Offset: 0x00C (R/ )  SysTick Calibration Register */
;;;479    } SysTick_Type;
;;;480    
;;;481    /** \brief SysTick Control / Status Register Definitions */
;;;482    #define SysTick_CTRL_COUNTFLAG_Pos         16U                                            /*!< SysTick CTRL: COUNTFLAG Position */
;;;483    #define SysTick_CTRL_COUNTFLAG_Msk         (1UL << SysTick_CTRL_COUNTFLAG_Pos)            /*!< SysTick CTRL: COUNTFLAG Mask */
;;;484    
;;;485    #define SysTick_CTRL_CLKSOURCE_Pos          2U                                            /*!< SysTick CTRL: CLKSOURCE Position */
;;;486    #define SysTick_CTRL_CLKSOURCE_Msk         (1UL << SysTick_CTRL_CLKSOURCE_Pos)            /*!< SysTick CTRL: CLKSOURCE Mask */
;;;487    
;;;488    #define SysTick_CTRL_TICKINT_Pos            1U                                            /*!< SysTick CTRL: TICKINT Position */
;;;489    #define SysTick_CTRL_TICKINT_Msk           (1UL << SysTick_CTRL_TICKINT_Pos)              /*!< SysTick CTRL: TICKINT Mask */
;;;490    
;;;491    #define SysTick_CTRL_ENABLE_Pos             0U                                            /*!< SysTick CTRL: ENABLE Position */
;;;492    #define SysTick_CTRL_ENABLE_Msk            (1UL /*<< SysTick_CTRL_ENABLE_Pos*/)           /*!< SysTick CTRL: ENABLE Mask */
;;;493    
;;;494    /** \brief SysTick Reload Register Definitions */
;;;495    #define SysTick_LOAD_RELOAD_Pos             0U                                            /*!< SysTick LOAD: RELOAD Position */
;;;496    #define SysTick_LOAD_RELOAD_Msk            (0xFFFFFFUL /*<< SysTick_LOAD_RELOAD_Pos*/)    /*!< SysTick LOAD: RELOAD Mask */
;;;497    
;;;498    /** \brief SysTick Current Register Definitions */
;;;499    #define SysTick_VAL_CURRENT_Pos             0U                                            /*!< SysTick VAL: CURRENT Position */
;;;500    #define SysTick_VAL_CURRENT_Msk            (0xFFFFFFUL /*<< SysTick_VAL_CURRENT_Pos*/)    /*!< SysTick VAL: CURRENT Mask */
;;;501    
;;;502    /** \brief SysTick Calibration Register Definitions */
;;;503    #define SysTick_CALIB_NOREF_Pos            31U                                            /*!< SysTick CALIB: NOREF Position */
;;;504    #define SysTick_CALIB_NOREF_Msk            (1UL << SysTick_CALIB_NOREF_Pos)               /*!< SysTick CALIB: NOREF Mask */
;;;505    
;;;506    #define SysTick_CALIB_SKEW_Pos             30U                                            /*!< SysTick CALIB: SKEW Position */
;;;507    #define SysTick_CALIB_SKEW_Msk             (1UL << SysTick_CALIB_SKEW_Pos)                /*!< SysTick CALIB: SKEW Mask */
;;;508    
;;;509    #define SysTick_CALIB_TENMS_Pos             0U                                            /*!< SysTick CALIB: TENMS Position */
;;;510    #define SysTick_CALIB_TENMS_Msk            (0xFFFFFFUL /*<< SysTick_CALIB_TENMS_Pos*/)    /*!< SysTick CALIB: TENMS Mask */
;;;511    
;;;512    /*@} end of group CMSIS_SysTick */
;;;513    
;;;514    #if defined (__MPU_PRESENT) && (__MPU_PRESENT == 1U)
;;;515    /**
;;;516      \ingroup  CMSIS_core_register
;;;517      \defgroup CMSIS_MPU     Memory Protection Unit (MPU)
;;;518      \brief    Type definitions for the Memory Protection Unit (MPU)
;;;519      @{
;;;520     */
;;;521    
;;;522    /**
;;;523      \brief  Structure type to access the Memory Protection Unit (MPU).
;;;524     */
;;;525    typedef struct
;;;526    {
;;;527      __IM  uint32_t TYPE;                   /*!< Offset: 0x000 (R/ )  MPU Type Register */
;;;528      __IOM uint32_t CTRL;                   /*!< Offset: 0x004 (R/W)  MPU Control Register */
;;;529      __IOM uint32_t RNR;                    /*!< Offset: 0x008 (R/W)  MPU Region Number Register */
;;;530      __IOM uint32_t RBAR;                   /*!< Offset: 0x00C (R/W)  MPU Region Base Address Register */
;;;531      __IOM uint32_t RASR;                   /*!< Offset: 0x010 (R/W)  MPU Region Attribute and Size Register */
;;;532    } MPU_Type;
;;;533    
;;;534    #define MPU_TYPE_RALIASES                  1U
;;;535    
;;;536    /** \brief MPU Type Register Definitions */
;;;537    #define MPU_TYPE_IREGION_Pos               16U                                            /*!< MPU TYPE: IREGION Position */
;;;538    #define MPU_TYPE_IREGION_Msk               (0xFFUL << MPU_TYPE_IREGION_Pos)               /*!< MPU TYPE: IREGION Mask */
;;;539    
;;;540    #define MPU_TYPE_DREGION_Pos                8U                                            /*!< MPU TYPE: DREGION Position */
;;;541    #define MPU_TYPE_DREGION_Msk               (0xFFUL << MPU_TYPE_DREGION_Pos)               /*!< MPU TYPE: DREGION Mask */
;;;542    
;;;543    #define MPU_TYPE_SEPARATE_Pos               0U                                            /*!< MPU TYPE: SEPARATE Position */
;;;544    #define MPU_TYPE_SEPARATE_Msk              (1UL /*<< MPU_TYPE_SEPARATE_Pos*/)             /*!< MPU TYPE: SEPARATE Mask */
;;;545    
;;;546    /** \brief MPU Control Register Definitions */
;;;547    #define MPU_CTRL_PRIVDEFENA_Pos             2U                                            /*!< MPU CTRL: PRIVDEFENA Position */
;;;548    #define MPU_CTRL_PRIVDEFENA_Msk            (1UL << MPU_CTRL_PRIVDEFENA_Pos)               /*!< MPU CTRL: PRIVDEFENA Mask */
;;;549    
;;;550    #define MPU_CTRL_HFNMIENA_Pos               1U                                            /*!< MPU CTRL: HFNMIENA Position */
;;;551    #define MPU_CTRL_HFNMIENA_Msk              (1UL << MPU_CTRL_HFNMIENA_Pos)                 /*!< MPU CTRL: HFNMIENA Mask */
;;;552    
;;;553    #define MPU_CTRL_ENABLE_Pos                 0U                                            /*!< MPU CTRL: ENABLE Position */
;;;554    #define MPU_CTRL_ENABLE_Msk                (1UL /*<< MPU_CTRL_ENABLE_Pos*/)               /*!< MPU CTRL: ENABLE Mask */
;;;555    
;;;556    /** \brief MPU Region Number Register Definitions */
;;;557    #define MPU_RNR_REGION_Pos                  0U                                            /*!< MPU RNR: REGION Position */
;;;558    #define MPU_RNR_REGION_Msk                 (0xFFUL /*<< MPU_RNR_REGION_Pos*/)             /*!< MPU RNR: REGION Mask */
;;;559    
;;;560    /** \brief MPU Region Base Address Register Definitions */
;;;561    #define MPU_RBAR_ADDR_Pos                   8U                                            /*!< MPU RBAR: ADDR Position */
;;;562    #define MPU_RBAR_ADDR_Msk                  (0xFFFFFFUL << MPU_RBAR_ADDR_Pos)              /*!< MPU RBAR: ADDR Mask */
;;;563    
;;;564    #define MPU_RBAR_VALID_Pos                  4U                                            /*!< MPU RBAR: VALID Position */
;;;565    #define MPU_RBAR_VALID_Msk                 (1UL << MPU_RBAR_VALID_Pos)                    /*!< MPU RBAR: VALID Mask */
;;;566    
;;;567    #define MPU_RBAR_REGION_Pos                 0U                                            /*!< MPU RBAR: REGION Position */
;;;568    #define MPU_RBAR_REGION_Msk                (0xFUL /*<< MPU_RBAR_REGION_Pos*/)             /*!< MPU RBAR: REGION Mask */
;;;569    
;;;570    /** \brief MPU Region Attribute and Size Register Definitions */
;;;571    #define MPU_RASR_ATTRS_Pos                 16U                                            /*!< MPU RASR: MPU Region Attribute field Position */
;;;572    #define MPU_RASR_ATTRS_Msk                 (0xFFFFUL << MPU_RASR_ATTRS_Pos)               /*!< MPU RASR: MPU Region Attribute field Mask */
;;;573    
;;;574    #define MPU_RASR_XN_Pos                    28U                                            /*!< MPU RASR: ATTRS.XN Position */
;;;575    #define MPU_RASR_XN_Msk                    (1UL << MPU_RASR_XN_Pos)                       /*!< MPU RASR: ATTRS.XN Mask */
;;;576    
;;;577    #define MPU_RASR_AP_Pos                    24U                                            /*!< MPU RASR: ATTRS.AP Position */
;;;578    #define MPU_RASR_AP_Msk                    (0x7UL << MPU_RASR_AP_Pos)                     /*!< MPU RASR: ATTRS.AP Mask */
;;;579    
;;;580    #define MPU_RASR_TEX_Pos                   19U                                            /*!< MPU RASR: ATTRS.TEX Position */
;;;581    #define MPU_RASR_TEX_Msk                   (0x7UL << MPU_RASR_TEX_Pos)                    /*!< MPU RASR: ATTRS.TEX Mask */
;;;582    
;;;583    #define MPU_RASR_S_Pos                     18U                                            /*!< MPU RASR: ATTRS.S Position */
;;;584    #define MPU_RASR_S_Msk                     (1UL << MPU_RASR_S_Pos)                        /*!< MPU RASR: ATTRS.S Mask */
;;;585    
;;;586    #define MPU_RASR_C_Pos                     17U                                            /*!< MPU RASR: ATTRS.C Position */
;;;587    #define MPU_RASR_C_Msk                     (1UL << MPU_RASR_C_Pos)                        /*!< MPU RASR: ATTRS.C Mask */
;;;588    
;;;589    #define MPU_RASR_B_Pos                     16U                                            /*!< MPU RASR: ATTRS.B Position */
;;;590    #define MPU_RASR_B_Msk                     (1UL << MPU_RASR_B_Pos)                        /*!< MPU RASR: ATTRS.B Mask */
;;;591    
;;;592    #define MPU_RASR_SRD_Pos                    8U                                            /*!< MPU RASR: Sub-Region Disable Position */
;;;593    #define MPU_RASR_SRD_Msk                   (0xFFUL << MPU_RASR_SRD_Pos)                   /*!< MPU RASR: Sub-Region Disable Mask */
;;;594    
;;;595    #define MPU_RASR_SIZE_Pos                   1U                                            /*!< MPU RASR: Region Size Field Position */
;;;596    #define MPU_RASR_SIZE_Msk                  (0x1FUL << MPU_RASR_SIZE_Pos)                  /*!< MPU RASR: Region Size Field Mask */
;;;597    
;;;598    #define MPU_RASR_ENABLE_Pos                 0U                                            /*!< MPU RASR: Region enable bit Position */
;;;599    #define MPU_RASR_ENABLE_Msk                (1UL /*<< MPU_RASR_ENABLE_Pos*/)               /*!< MPU RASR: Region enable bit Disable Mask */
;;;600    
;;;601    /*@} end of group CMSIS_MPU */
        0x00000da4:    2800        .(      CMP      r0,#0
        0x00000da6:    d405        ..      BMI      0xdb4 ; __NVIC_SetPriority + 16
        0x00000da8:    2203        ."      MOVS     r2,#3
        0x00000daa:    4603        .F      MOV      r3,r0
        0x00000dac:    4393        .C      BICS     r3,r3,r2
        0x00000dae:    4a0c        .J      LDR      r2,[pc,#48] ; [0xde0] = 0xe000e400
        0x00000db0:    189a        ..      ADDS     r2,r3,r2
        0x00000db2:    e006        ..      B        0xdc2 ; __NVIC_SetPriority + 30
        0x00000db4:    220f        ."      MOVS     r2,#0xf
        0x00000db6:    4002        .@      ANDS     r2,r2,r0
        0x00000db8:    3a08        .:      SUBS     r2,r2,#8
        0x00000dba:    2303        .#      MOVS     r3,#3
        0x00000dbc:    439a        .C      BICS     r2,r2,r3
        0x00000dbe:    4b07        .K      LDR      r3,[pc,#28] ; [0xddc] = 0xe000ed1c
        0x00000dc0:    18d2        ..      ADDS     r2,r2,r3
        0x00000dc2:    0780        ..      LSLS     r0,r0,#30
        0x00000dc4:    0ec0        ..      LSRS     r0,r0,#27
        0x00000dc6:    0189        ..      LSLS     r1,r1,#6
        0x00000dc8:    b2c9        ..      UXTB     r1,r1
        0x00000dca:    4081        .@      LSLS     r1,r1,r0
        0x00000dcc:    23ff        .#      MOVS     r3,#0xff
        0x00000dce:    4083        .@      LSLS     r3,r3,r0
        0x00000dd0:    6810        .h      LDR      r0,[r2,#0]
        0x00000dd2:    4398        .C      BICS     r0,r0,r3
        0x00000dd4:    4308        .C      ORRS     r0,r0,r1
        0x00000dd6:    6010        .`      STR      r0,[r2,#0]
        0x00000dd8:    4770        pG      BX       lr
        0x00000dda:    46c0        .F      MOV      r8,r8
    $d.2
    __arm_cp.1_0
        0x00000ddc:    e000ed1c    ....    DCD    3758157084
    __arm_cp.1_1
        0x00000de0:    e000e400    ....    DCD    3758154752
    $t.0
    main
;;; ../Src\main.c (2748)
        0x00000de4:    b082        ..      SUB      sp,sp,#8
        0x00000de6:    f7fffb11    ....    BL       HAL_Init ; 0x40c
        0x00000dea:    f7ffff9f    ....    BL       _SystemClock_Config ; 0xd2c
        0x00000dee:    2002        .       MOVS     r0,#2
        0x00000df0:    9001        ..      STR      r0,[sp,#4]
        0x00000df2:    f7fff9c7    ....    BL       BSP_LED_Init ; 0x184
        0x00000df6:    4c2a        *L      LDR      r4,[pc,#168] ; [0xea0] = 0x20000018
        0x00000df8:    2310        .#      MOVS     r3,#0x10
        0x00000dfa:    9300        ..      STR      r3,[sp,#0]
        0x00000dfc:    2140        @!      MOVS     r1,#0x40
        0x00000dfe:    22e1        ."      MOVS     r2,#0xe1
        0x00000e00:    0252        R.      LSLS     r2,r2,#9
        0x00000e02:    6062        b`      STR      r2,[r4,#4]
        0x00000e04:    4827        'H      LDR      r0,[pc,#156] ; [0xea4] = 0x40000400
        0x00000e06:    6020         `      STR      r0,[r4,#0]
        0x00000e08:    2700        .'      MOVS     r7,#0
        0x00000e0a:    6121        !a      STR      r1,[r4,#0x10]
        0x00000e0c:    6167        ga      STR      r7,[r4,#0x14]
        0x00000e0e:    61a3        .a      STR      r3,[r4,#0x18]
        0x00000e10:    4d25        %M      LDR      r5,[pc,#148] ; [0xea8] = 0x2000004c
        0x00000e12:    2601        .&      MOVS     r6,#1
        0x00000e14:    0270        p.      LSLS     r0,r6,#9
        0x00000e16:    4b23        #K      LDR      r3,[pc,#140] ; [0xea4] = 0x40000400
        0x00000e18:    602b        +`      STR      r3,[r5,#0]
        0x00000e1a:    606a        j`      STR      r2,[r5,#4]
        0x00000e1c:    60a8        .`      STR      r0,[r5,#8]
        0x00000e1e:    6129        )a      STR      r1,[r5,#0x10]
        0x00000e20:    616f        oa      STR      r7,[r5,#0x14]
        0x00000e22:    9900        ..      LDR      r1,[sp,#0]
        0x00000e24:    61a9        .a      STR      r1,[r5,#0x18]
        0x00000e26:    60a0        .`      STR      r0,[r4,#8]
        0x00000e28:    4620         F      MOV      r0,r4
        0x00000e2a:    f7fffdcf    ....    BL       HAL_UART_Init ; 0x9cc
        0x00000e2e:    4628        (F      MOV      r0,r5
        0x00000e30:    f7fffdcc    ....    BL       HAL_UART_Init ; 0x9cc
        0x00000e34:    f7ffffa4    ....    BL       __NVIC_EnableIRQ ; 0xd80
        0x00000e38:    4d1c        .M      LDR      r5,[pc,#112] ; [0xeac] = 0x20000181
        0x00000e3a:    7828        (x      LDRB     r0,[r5,#0]
        0x00000e3c:    491c        .I      LDR      r1,[pc,#112] ; [0xeb0] = 0x20000081
        0x00000e3e:    1809        ..      ADDS     r1,r1,r0
        0x00000e40:    4620         F      MOV      r0,r4
        0x00000e42:    4632        2F      MOV      r2,r6
        0x00000e44:    f7fffe28    ..(.    BL       HAL_UART_Receive_IT ; 0xa98
        0x00000e48:    6820         h      LDR      r0,[r4,#0]
        0x00000e4a:    6801        .h      LDR      r1,[r0,#0]
        0x00000e4c:    4331        1C      ORRS     r1,r1,r6
        0x00000e4e:    6001        .`      STR      r1,[r0,#0]
        0x00000e50:    6801        .h      LDR      r1,[r0,#0]
        0x00000e52:    9a01        ..      LDR      r2,[sp,#4]
        0x00000e54:    4311        .C      ORRS     r1,r1,r2
        0x00000e56:    6001        .`      STR      r1,[r0,#0]
        0x00000e58:    f7ffff9a    ....    BL       __NVIC_SetPriority ; 0xd90
        0x00000e5c:    e012        ..      B        0xe84 ; main + 160
        0x00000e5e:    4815        .H      LDR      r0,[pc,#84] ; [0xeb4] = 0x20000004
        0x00000e60:    19c1        ..      ADDS     r1,r0,r7
        0x00000e62:    2207        ."      MOVS     r2,#7
        0x00000e64:    4620         F      MOV      r0,r4
        0x00000e66:    f7fffe41    ..A.    BL       HAL_UART_Transmit_IT ; 0xaec
        0x00000e6a:    1c7f        ..      ADDS     r7,r7,#1
        0x00000e6c:    202d        -       MOVS     r0,#0x2d
        0x00000e6e:    2120         !      MOVS     r1,#0x20
        0x00000e70:    5421        !T      STRB     r1,[r4,r0]
        0x00000e72:    6820         h      LDR      r0,[r4,#0]
        0x00000e74:    6941        Ai      LDR      r1,[r0,#0x14]
        0x00000e76:    4331        1C      ORRS     r1,r1,r6
        0x00000e78:    6141        Aa      STR      r1,[r0,#0x14]
        0x00000e7a:    2201        ."      MOVS     r2,#1
        0x00000e7c:    4620         F      MOV      r0,r4
        0x00000e7e:    490e        .I      LDR      r1,[pc,#56] ; [0xeb8] = 0x20000080
        0x00000e80:    f7fffe0a    ....    BL       HAL_UART_Receive_IT ; 0xa98
        0x00000e84:    2602        .&      MOVS     r6,#2
        0x00000e86:    4630        0F      MOV      r0,r6
        0x00000e88:    f7fff9a6    ....    BL       BSP_LED_On ; 0x1d8
        0x00000e8c:    7828        (x      LDRB     r0,[r5,#0]
        0x00000e8e:    2800        .(      CMP      r0,#0
        0x00000e90:    d0f8        ..      BEQ      0xe84 ; main + 160
        0x00000e92:    1e40        @.      SUBS     r0,r0,#1
        0x00000e94:    7028        (p      STRB     r0,[r5,#0]
        0x00000e96:    2f07        ./      CMP      r7,#7
        0x00000e98:    d9e1        ..      BLS      0xe5e ; main + 122
        0x00000e9a:    2700        .'      MOVS     r7,#0
        0x00000e9c:    e7e6        ..      B        0xe6c ; main + 136
        0x00000e9e:    46c0        .F      MOV      r8,r8
    $d.1
    __arm_cp.0_0
        0x00000ea0:    20000018    ...     DCD    536870936
    __arm_cp.0_1
        0x00000ea4:    40000400    ...@    DCD    1073742848
    __arm_cp.0_2
        0x00000ea8:    2000004c    L..     DCD    536870988
    __arm_cp.0_3
        0x00000eac:    20000181    ...     DCD    536871297
    __arm_cp.0_4
        0x00000eb0:    20000081    ...     DCD    536871041
    __arm_cp.0_5
        0x00000eb4:    20000004    ...     DCD    536870916
    __arm_cp.0_6
        0x00000eb8:    20000080    ...     DCD    536871040
    $t
    i.__scatterload_copy
    __scatterload_copy
        0x00000ebc:    e002        ..      B        0xec4 ; __scatterload_copy + 8
        0x00000ebe:    c808        ..      LDM      r0!,{r3}
        0x00000ec0:    1f12        ..      SUBS     r2,r2,#4
        0x00000ec2:    c108        ..      STM      r1!,{r3}
        0x00000ec4:    2a00        .*      CMP      r2,#0
        0x00000ec6:    d1fa        ..      BNE      0xebe ; __scatterload_copy + 2
        0x00000ec8:    4770        pG      BX       lr
    i.__scatterload_null
    __scatterload_null
        0x00000eca:    4770        pG      BX       lr
    i.__scatterload_zeroinit
    __scatterload_zeroinit
        0x00000ecc:    2000        .       MOVS     r0,#0
        0x00000ece:    e001        ..      B        0xed4 ; __scatterload_zeroinit + 8
        0x00000ed0:    c101        ..      STM      r1!,{r0}
        0x00000ed2:    1f12        ..      SUBS     r2,r2,#4
        0x00000ed4:    2a00        .*      CMP      r2,#0
        0x00000ed6:    d1fb        ..      BNE      0xed0 ; __scatterload_zeroinit + 4
        0x00000ed8:    4770        pG      BX       lr
    $d.realdata
    ParityTable256
        0x00000eda:    0100        ..      DCW    256
        0x00000edc:    00010001    ....    DCD    65537
        0x00000ee0:    00010100    ....    DCD    65792
        0x00000ee4:    01000100    ....    DCD    16777472
        0x00000ee8:    00010001    ....    DCD    65537
        0x00000eec:    01000100    ....    DCD    16777472
        0x00000ef0:    01000001    ....    DCD    16777217
        0x00000ef4:    00010001    ....    DCD    65537
        0x00000ef8:    00010100    ....    DCD    65792
        0x00000efc:    01000100    ....    DCD    16777472
        0x00000f00:    01000001    ....    DCD    16777217
        0x00000f04:    00010001    ....    DCD    65537
        0x00000f08:    01000100    ....    DCD    16777472
        0x00000f0c:    00010001    ....    DCD    65537
        0x00000f10:    00010100    ....    DCD    65792
        0x00000f14:    01000100    ....    DCD    16777472
        0x00000f18:    00010001    ....    DCD    65537
        0x00000f1c:    01000100    ....    DCD    16777472
        0x00000f20:    01000001    ....    DCD    16777217
        0x00000f24:    00010001    ....    DCD    65537
        0x00000f28:    01000100    ....    DCD    16777472
        0x00000f2c:    00010001    ....    DCD    65537
        0x00000f30:    00010100    ....    DCD    65792
        0x00000f34:    01000100    ....    DCD    16777472
        0x00000f38:    01000001    ....    DCD    16777217
        0x00000f3c:    00010001    ....    DCD    65537
        0x00000f40:    00010100    ....    DCD    65792
        0x00000f44:    01000100    ....    DCD    16777472
        0x00000f48:    00010001    ....    DCD    65537
        0x00000f4c:    01000100    ....    DCD    16777472
        0x00000f50:    01000001    ....    DCD    16777217
        0x00000f54:    00010001    ....    DCD    65537
        0x00000f58:    00010100    ....    DCD    65792
        0x00000f5c:    01000100    ....    DCD    16777472
        0x00000f60:    01000001    ....    DCD    16777217
        0x00000f64:    00010001    ....    DCD    65537
        0x00000f68:    01000100    ....    DCD    16777472
        0x00000f6c:    00010001    ....    DCD    65537
        0x00000f70:    00010100    ....    DCD    65792
        0x00000f74:    01000100    ....    DCD    16777472
        0x00000f78:    01000001    ....    DCD    16777217
        0x00000f7c:    00010001    ....    DCD    65537
        0x00000f80:    00010100    ....    DCD    65792
        0x00000f84:    01000100    ....    DCD    16777472
        0x00000f88:    00010001    ....    DCD    65537
        0x00000f8c:    01000100    ....    DCD    16777472
        0x00000f90:    01000001    ....    DCD    16777217
        0x00000f94:    00010001    ....    DCD    65537
        0x00000f98:    01000100    ....    DCD    16777472
        0x00000f9c:    00010001    ....    DCD    65537
        0x00000fa0:    00010100    ....    DCD    65792
        0x00000fa4:    01000100    ....    DCD    16777472
        0x00000fa8:    00010001    ....    DCD    65537
        0x00000fac:    01000100    ....    DCD    16777472
        0x00000fb0:    01000001    ....    DCD    16777217
        0x00000fb4:    00010001    ....    DCD    65537
        0x00000fb8:    00010100    ....    DCD    65792
        0x00000fbc:    01000100    ....    DCD    16777472
        0x00000fc0:    01000001    ....    DCD    16777217
        0x00000fc4:    00010001    ....    DCD    65537
        0x00000fc8:    01000100    ....    DCD    16777472
        0x00000fcc:    00010001    ....    DCD    65537
        0x00000fd0:    00010100    ....    DCD    65792
        0x00000fd4:    01000100    ....    DCD    16777472
        0x00000fd8:    00000001    ....    DCD    1
    Region$$Table$$Base
        0x00000fdc:    00001000    ....    DCD    4096
        0x00000fe0:    20000000    ...     DCD    536870912
        0x00000fe4:    00000018    ....    DCD    24
        0x00000fe8:    00000ebc    ....    DCD    3772
        0x00000fec:    00001018    ....    DCD    4120
        0x00000ff0:    20000018    ...     DCD    536870936
        0x00000ff4:    00000370    p...    DCD    880
        0x00000ff8:    00000ecc    ....    DCD    3788
    Region$$Table$$Limit

** Section #2 'RW_IRAM1' (SHT_PROGBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 24 bytes (alignment 8)
    Address: 0x20000000


** Section #3 'RW_IRAM1' (SHT_NOBITS) [SHF_ALLOC + SHF_WRITE]
    Size   : 880 bytes (alignment 8)
    Address: 0x20000018


** Section #4 '.debug_abbrev' (SHT_PROGBITS)
    Size   : 3438 bytes


** Section #5 '.debug_frame' (SHT_PROGBITS)
    Size   : 2992 bytes


** Section #6 '.debug_info' (SHT_PROGBITS)
    Size   : 16665 bytes


** Section #7 '.debug_line' (SHT_PROGBITS)
    Size   : 11483 bytes


** Section #8 '.debug_loc' (SHT_PROGBITS)
    Size   : 4210 bytes


** Section #9 '.debug_str' (SHT_PROGBITS)
    Size   : 16556 bytes


** Section #10 '.debug_ranges' (SHT_PROGBITS)
    Size   : 992 bytes


** Section #11 '.symtab' (SHT_SYMTAB)
    Size   : 5792 bytes (alignment 4)
    String table #12 '.strtab'
    Last local symbol no. 222


** Section #12 '.strtab' (SHT_STRTAB)
    Size   : 4448 bytes


** Section #13 '.note' (SHT_NOTE)
    Size   : 28 bytes (alignment 4)


** Section #14 '.comment' (SHT_PROGBITS)
    Size   : 2000 bytes


** Section #15 '.shstrtab' (SHT_STRTAB)
    Size   : 148 bytes


